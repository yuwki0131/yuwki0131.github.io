<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='https://yuwki0131.github.io/' rel='self' type='application/rss+xml'/>
<title>
何で走っているのだろう
</title>
<link>
https://yuwki0131.github.io/
</link>
<description>
This blog is a cartesian closed category
</description>
<lastBuildDate>
Sat, 16 Feb 2019 17:08:55 +0900
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
https://yuwki0131.github.io/posts-output/2019-02-15-docker-travis/
</guid>
<link>
https://yuwki0131.github.io/posts-output/2019-02-15-docker-travis/
</link>
<title>
TravisCIでdocker-composeを起動して、テストしたい
</title>
<description>
&lt;h2 id=&quot;travisciでdocker-composeを起動したい&quot;&gt;TravisCIでdocker-composeを起動したい&lt;/h2&gt;&lt;p&gt;CIテスト環境でDBにデータが突っ込まれている状態でテストができると、確実に自動テストできる範囲が広がります。 DBをdockerで起動することで、CI環境でもDBへのアクセステストを行ってみました。&lt;/p&gt;&lt;p&gt;Travisでは以下のようにinstallすることで、docker-composeが使用できるようになるようです。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;
  - sudo rm /usr/local/bin/docker-compose
  - curl -L https://github.com/docker/compose/releases/download/1.18.0-rc2/docker-compose-`uname -s`-`uname -m` &amp;gt; docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;docker-composeが使えるようになったら、daemonとしてdockerを起動。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  - docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ちなみに、docker-compose.ymlは以下のような感じです。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yml&quot;&gt;version: '3.2'
services:
  db:
    image: mysql:5.7.22
    ports:
      - &amp;quot;3307:3306&amp;quot;
    environment:
        MYSQL&amp;#95;ROOT&amp;#95;PASSWORD: passwd
        MYSQL&amp;#95;USER: crudapp
        MYSQL&amp;#95;PASSWORD: passwd
        MYSQL&amp;#95;DATABASE: crudapp
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;dbのmigration&quot;&gt;dbのmigration&lt;/h2&gt;&lt;p&gt;DBの初期化はalembicでmigrationファイルを作成し、コマンドでDBを構成してupdateします。 CIテストの度に、DBを構成、初期化します。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  - alembic upgrade head
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;&lt;p&gt;最終的にできた.travis.ymlは以下のような感じ。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yml&quot;&gt;language: python
python:
  - &amp;quot;3.7-dev&amp;quot;

branches:
  only:
  - master

env:
  - DOCKER&amp;#95;COMPOSE&amp;#95;VERSION=1.4.2

before&amp;#95;install:
  - sudo rm /usr/local/bin/docker-compose
  - curl -L https://github.com/docker/compose/releases/download/1.18.0-rc2/docker-compose-`uname -s`-`uname -m` &amp;gt; docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin
  - docker-compose up -d

install:
  - pip3 install -r requirements.txt

script:
  - alembic upgrade head
  - python3 test.py
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;dbへのアクセステスト&quot;&gt;DBへのアクセステスト&lt;/h2&gt;&lt;p&gt;dbにアクセスしてみます。&lt;/p&gt;&lt;p&gt;test.py&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;# -&amp;#42;- coding: utf-8 -&amp;#42;-

import mysql.connector

if &amp;#95;&amp;#95;name&amp;#95;&amp;#95; == '&amp;#95;&amp;#95;main&amp;#95;&amp;#95;':
    print&amp;#40;&amp;quot;db connection test&amp;quot;&amp;#41;
    conn = mysql.connector.connect&amp;#40;
        user='crudapp',
        password='passwd',
        host='localhost',
        port='3307',
        database='crudapp'&amp;#41;
    cur = conn.cursor&amp;#40;&amp;#41;
    print&amp;#40;&amp;quot;db connected&amp;quot;&amp;#41;

    cur.execute&amp;#40;'insert into users &amp;#40;name&amp;#41; values &amp;#40;&amp;quot;test&amp;quot;&amp;#41;'&amp;#41;

    cur.execute&amp;#40;&amp;quot;select &amp;#42; from users;&amp;quot;&amp;#41;
    row = cur.fetchone&amp;#40;&amp;#41;

    # output
    print&amp;#40;&amp;quot;db: &amp;quot; + str&amp;#40;row&amp;#41;&amp;#41;

    cur.close
    conn.close
    print&amp;#40;&amp;quot;db test exit&amp;quot;&amp;#41;
    exit&amp;#40;0&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;すべてのソース&quot;&gt;すべてのソース&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/yuwki0131/docker-travis-integration'&gt;yuwki0131/docker-travis-integration: travis内でdockerを起動させるテスト&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://docs.travis-ci.com/user/docker/'&gt;Using Docker in Builds - Travis CI&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Fri, 15 Feb 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
https://yuwki0131.github.io/posts-output/2018-05-06-scala-fp-topics/
</guid>
<link>
https://yuwki0131.github.io/posts-output/2018-05-06-scala-fp-topics/
</link>
<title>
Scalaと関数型プログラミングに関連するトピックなど
</title>
<description>
&lt;p&gt;Scalaについて勉強した時のメモ(その7)です。その他関数型プログラミング関連の話題について。&lt;/p&gt;&lt;p&gt;※ 元々はmarkdownで書いていたテキストの転載。&lt;/p&gt;&lt;h2 id=&quot;名前渡し(call-by-name)、評価戦略/遅延評価&quot;&gt;名前渡し(Call-by-name)、評価戦略/遅延評価&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;プログラムの実行順序のこと。&lt;/li&gt;&lt;li&gt;calaには、通常の評価戦略(call-by-value)に加えて、名前渡し(call-by-name)がある。  その他、stream型だと、遅延リストになる。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;プロパティベースのテスト&quot;&gt;プロパティベースのテスト&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;特定のケースのみを対象としたテストケースではなく、関数の引数に対する戻り値の性質をテストする。&lt;/li&gt;&lt;li&gt;固有のテストケースを持たないと言う意味で従来の関数に対するユニットテストとは大きく異なる。&lt;/li&gt;&lt;li&gt;&lt;a href='http://www.scalatest.org/user_guide/property_based_testing'&gt;ScalaTestのProperty-based testing&lt;/a&gt;  などで使用できる。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;recursion&amp;#95;scheme&quot;&gt;Recursion Scheme&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;fold/unfold系関数の一般化。&lt;/li&gt;&lt;li&gt;catamorphism, anamorphism, hylomorphism ...などなんとかモルフィズムという名前が付いている。&lt;/li&gt;&lt;li&gt;Recursion Schemeに基づくプログラムの融合変換などもある。&lt;/li&gt;&lt;li&gt;Scalaだと&lt;a href='https://github.com/slamdata/matryoshka'&gt;Matryoshka&lt;/a&gt; というライブラリが有名。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;モナドなどの型クラス&quot;&gt;モナドなどの型クラス&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;ファンクタ、アプリカティブファンクタ、モナド、コモナド、モノイド(Functor, applicative functor, monad, comonad, monoid)&lt;/li&gt;&lt;li&gt;特に公式の用語集(以下)にも出てこないので、Scalaでは特に普段は意識する必要はない(と思われる)。&lt;ul&gt;&lt;li&gt;&lt;a href='https://docs.scala-lang.org/glossary/'&gt;Glossary | Scala Documentation&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;モナドはモナド則と呼ばれる関数の合成規則を持った型クラスの事。よく副作用を表現する時に使われる。(勿論、副作用以外も表すことができる)&lt;ul&gt;&lt;li&gt;モナド同様、ファンクタはファンクタ則を、アプリカティブファンクタはアプリカティブファンクタ則がある型クラスのこと。&lt;/li&gt;&lt;li&gt;ファンクタ、アプリカティブファンクタ、モナドの順に制約(性質的な縛り)が強くなる。&lt;/li&gt;&lt;li&gt;コモナドはその双対(圏論の用語なので詳しく知りたい場合はその辺りを参照)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;単に副作用を表現するだけでなく、自分でカスタマイズできる事から愛好者も多い(と思われる。特にHaskeller)。&lt;/li&gt;&lt;li&gt;モノイドは、foldまわりでよく使われる二項演算の一般化。&lt;/li&gt;&lt;li&gt;Scalaだと&lt;a href='https://github.com/scalaz/scalaz'&gt;Scalaz&lt;/a&gt; でよく使われる。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;抽象解釈(abstract&amp;#95;interpretation)&quot;&gt;抽象解釈(Abstract interpretation)&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;プログラムの抽象的な実行のこと。静的型付けと同じ、静的解析の一種。&lt;/li&gt;&lt;li&gt;似たようなものとしてSymbolic Execution(記号的実行)というのもある。&lt;/li&gt;&lt;li&gt;Scalaだと、&lt;a href='https://github.com/jandom-devel/Jandom'&gt;Jadom&lt;/a&gt; というのがあるらしいが。。。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;依存型(dependent&amp;#95;type)&quot;&gt;依存型(Dependent type)&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;一般的なプログラムの型付けより詳細な型を付けることが出来る。例えば0以上のInt型など。&lt;/li&gt;&lt;li&gt;Scalaで言われているDependent typeと関数型言語で言われる依存型は意味が異なる。&lt;/li&gt;&lt;li&gt;Scalaだと&lt;a href='https://github.com/epfl-lara/stainless'&gt;Stainless&lt;/a&gt; というライブラリがある。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://yuroyoro.hatenablog.com/entry/20120203/1328248662'&gt;関数合成のススメ 〜 オブジェクト指向プログラマへ捧げる関数型言語への導入その1&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://53ningen.com/path-dependent-types/'&gt;Scalaの経路依存型（path-dependent type）とは？&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://yuroyoro.hatenablog.com/entry/2013/01/23/192244'&gt;Scala2.10.0のDependent method typesと型クラスを組み合わせた『The Magnet Pattern』がヤバい件&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://kmizu.hatenablog.com/entry/20120504/1336087466'&gt;Scalaに関して知っておくべきたった一つの重要な事&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://xuwei-k.hatenablog.com/entry/20141207/1417940174'&gt;代数的データ型とshapelessのマクロによる型クラスのインスタンスの自動導出&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://xuwei-k.hatenablog.com/entry/20130709/1373330529'&gt;Scalaにおける細かい最適化のプラクティス&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://docs.scala-lang.org/ja/overviews/collections/performance-characteristics.html'&gt;Scala COLLECTIONS 性能特性 | Scala Documentation&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;練習問題&quot;&gt;練習問題&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://aperiodic.net/phil/scala/s-99/'&gt;S-99: Ninety-Nine Scala Problems&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;読み物&quot;&gt;読み物&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://togetter.com/li/25283'&gt;関数型言語でのデザイン手法 - togetter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.infoq.com/jp/news/2014/03/oo-functional-programming'&gt;オブジェクト指向設計の原則と関数型プログラミング&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/yuroyoro/Japanese_Translations_of_Scala_Articles/tree/master/source/ja/type_level_programming_in_scala'&gt;Scalaで型レベルプログラミング(日本語訳)&lt;/a&gt;&lt;ul&gt;&lt;li&gt;4章まで(?)(2018/01/27現在)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://delihiros.hatenablog.jp/entry/2012/05/01/032433'&gt;Scalaは関数型プログラミング言語ではない&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Sun, 06 May 2018 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
https://yuwki0131.github.io/posts-output/2018-04-20-scala-types/
</guid>
<link>
https://yuwki0131.github.io/posts-output/2018-04-20-scala-types/
</link>
<title>
Scalaの型と型関連の機能
</title>
<description>
&lt;p&gt;Scalaについて勉強した時のメモ(その6)です。Scalaの型の機能とそれに関連するテクニックについて。&lt;/p&gt;&lt;p&gt;※ 元々はmarkdownで書いていたテキストの転載。&lt;/p&gt;&lt;h2 id=&quot;scalaと型&quot;&gt;Scalaと型&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Scalaの型推論は漸進的型付と呼ばれ、基本的に前から推論していく。&lt;ul&gt;&lt;li&gt;(余談)HaskellやOCamlの型推論は、Hindley-Minler(の派生)と呼ばれる推論方式。    この方法は、最も一般的な型を自動的に導出していく手法で、通常の場合、いわゆる型注釈(型ヒント)に相当するものが不要。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;型注釈: 変数や引数などに対する型の指定。いわゆる、&lt;code&gt;val x: String = 〜&lt;/code&gt;のコロンの後ろの型指定のこと。&lt;/li&gt;&lt;li&gt;型パラメータ: Javaで言う所のジェネリクス。&lt;ul&gt;&lt;li&gt;&lt;code&gt;trait A&amp;#91;B&amp;#93; { def b&amp;#40;&amp;#41;:B; }&lt;/code&gt;の&lt;code&gt;B&lt;/code&gt;&lt;/li&gt;&lt;li&gt;型パラメータで指定できる共変、反変、非変については、&lt;a href='https://dwango.github.io/scala_text/type-parameter.html'&gt;型パラメータと変位指定 - dwango on GitHub&lt;/a&gt; を参照。以下、自分用のメモ。&lt;ul&gt;&lt;li&gt;共変(&lt;code&gt;&amp;#91;+B&amp;#93;&lt;/code&gt;): A extends Bの時のみ、val a:G[B] = b:G[A]が可。&lt;/li&gt;&lt;li&gt;反変(&lt;code&gt;&amp;#91;-B&amp;#93;&lt;/code&gt;): A extends Bの時のみ、val a:G[A] = b:G[B]が可。&lt;/li&gt;&lt;li&gt;非変(&lt;code&gt;&amp;#91;B&amp;#93;&lt;/code&gt;): A = Bの時のみ、val a:G[A] = b:G[B]が可。&lt;/li&gt;&lt;li&gt;上界(&lt;code&gt;&amp;#91;B &amp;lt;: A&amp;#93;&lt;/code&gt;): BがAを継承の性質。&lt;/li&gt;&lt;li&gt;下界(&lt;code&gt;&amp;#91;B &amp;gt;: A&amp;#93;&lt;/code&gt;): BがAのスーパークラスである性質。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;型パラメータに様々な制約を付ける事で、クラス、インターフェースなしにジェネリックな関数を定義できる。(構造的部分型を参照)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;型エイリアス: 型に別名を付けることができる。型定義の長さが絶望的に長くなった時に有効。&lt;ul&gt;&lt;li&gt;&lt;code&gt;type String3 = &amp;#40;String, String, String&amp;#41;&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;型コンストラクタ: 型を引数にとり別の型を生成する型。&lt;ul&gt;&lt;li&gt;プログラミングでよく目にするものとしては、Option, Either, Futureなどが典型的。&lt;/li&gt;&lt;li&gt;型パラメータが引数にとる。&lt;/li&gt;&lt;li&gt;Option[+A]という型コンストラクタに対して、Option[String]という型を定義する時などに使われる。&lt;/li&gt;&lt;li&gt;他の関数型言語だとFunctorなどがよく出てくる。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;型クラス&quot;&gt;型クラス&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&quot;既存の型に後付けするタイプのインターフェース&quot;(参考文献から引用)&lt;/li&gt;&lt;li&gt;ある型がどのような振る舞いをするかまとめた物。&lt;ul&gt;&lt;li&gt;上記のような言い方をすると結局Javaのインターフェースと一緒じゃんって言われる。。。&lt;/li&gt;&lt;li&gt;型クラスの定義の流れ。&lt;ol&gt;&lt;li&gt;振る舞いをまとめた&lt;code&gt;trait A&amp;#91;T&amp;#93;&lt;/code&gt;を作る。(Tは型パラメータ。型クラスは必ず型パラメータを持つ)&lt;/li&gt;&lt;li&gt;&lt;code&gt;trait A&amp;#91;T&amp;#93;&lt;/code&gt;(型クラス)のインスタンス(実装)X, Y, Zを作り、implicitに定義する。&lt;/li&gt;&lt;li&gt;Aで使っている関数を使ったコードBを実装する。       この時、&lt;code&gt;trait A&amp;#91;T&amp;#93;&lt;/code&gt;のインスタンス(実装)X, Y, Zをimplicitに切り替える。&lt;/li&gt;&lt;li&gt;以降、コードBに型ごとに機能を追加したい場合は、trait Aの実装を追加することで、コードBの機能が様々な型で使えるようになる。&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Javaで言うと、Interface(や抽象クラス)のインスタンスが暗黙に選択される(切り替えられる)イメージ。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;型クラスを使用したコード側で型クラス(の定義)に紐づく型クラスのインスタンス(実装)を切り替える。&lt;ul&gt;&lt;li&gt;(Scalaの場合、)型クラスはimplicit(暗黙のパラメータ)で型クラスの実装を切り替える。&lt;/li&gt;&lt;li&gt;型で処理を切り替える所がポイント。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;
class Firefox {
}

class Chrome {
}

trait BrowserShows&amp;#91;A&amp;#93; {
  def show: String
}

implicit val firefox = new BrowserShows&amp;#91;Firefox&amp;#93; {
  def show: String = &amp;quot;Firefoxで表示&amp;quot;
}

implicit val chrome = new BrowserShows&amp;#91;Chrome&amp;#93; {
  def show: String = &amp;quot;Chromeで表示&amp;quot;
}

def exec&amp;#91;B&amp;#93;&amp;#40;browser: B&amp;#41;&amp;#40;implicit s: BrowserShows&amp;#91;B&amp;#93;&amp;#41;: String = s.show

def main&amp;#40;args: Array&amp;#91;String&amp;#93;&amp;#41;: Unit = {
  println&amp;#40;exec&amp;#40;new Chrome&amp;#40;&amp;#41;&amp;#41;&amp;#41;
  println&amp;#40;exec&amp;#40;new Chrome&amp;#40;&amp;#41;&amp;#41;&amp;#41;
  println&amp;#40;exec&amp;#40;new Firefox&amp;#40;&amp;#41;&amp;#41;&amp;#41;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;参考文献&lt;ul&gt;&lt;li&gt;&lt;a href='https://togetter.com/li/1113557'&gt;型クラスに関するここ数日の議論 - togetter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://amaya382.hatenablog.jp/entry/2017/05/13/195913'&gt;型クラスの雰囲気をつかんでScala標準ライブラリの型クラスを使ってみる回 - 水底&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://dwango.github.io/scala_text/implicit.html'&gt;implicit - dwango on GitHub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://nekogata.hatenablog.com/entry/2014/06/30/062342'&gt;Scala の implicit parameter は型クラスの一種とはどういうことなのか&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://ropas.snu.ac.kr/~bruno/papers/TypeClasses.pdf'&gt;Type Classes as Objects and Implicits&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;構造的部分型(structural&amp;#95;subtyping)&quot;&gt;構造的部分型(Structural subtyping)&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;特定の性質を持った型を型パラメータとして定義(宣言)できる。&lt;ul&gt;&lt;li&gt;部分的な型を表すという意味では、traitに近いが、オブジェクトを使用する側でのみ必要な型を定義するという点がtraitとは異なる。    traitによる定義は、あくまでクラスの性質を表すが、構造的部分型は引数や変数に代入可能な一般的なオブジェクトの型を表す    (その型が必要な場面でのみ表現することができる)。&lt;/li&gt;&lt;li&gt;動的型付け言語におけるDuck-typingの性質を静的型付言語で使用したい場合に使用できる。&lt;ul&gt;&lt;li&gt;Duck-typing: もしもそれがアヒルのように歩き、アヒルのように鳴くのなら、それはアヒルである。      : &lt;a href='https://ja.wikipedia.org/wiki/%E3%83%80%E3%83%83%E3%82%AF%E3%83%BB%E3%82%BF%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0'&gt;ダック・タイピング - Wikipedia&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;その場面のコードの変数で最も一般的な型を必要な箇所で定義することで、静的に型付したままDuck-typing的な性質を実現する。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;動的型付け言語(Ruby, Pythonなど)は、名前でメソッドを引っ張ってくる。&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;class A:
    def func1&amp;#40;self, i&amp;#41;:
        〜

class B:
    def func1&amp;#40;self, i&amp;#41;:
        〜

def func2&amp;#40;objX&amp;#41;:
  objX.func1&amp;#40;1&amp;#41;
  〜

func2&amp;#40;A&amp;#40;&amp;#41;&amp;#41;
func2&amp;#40;B&amp;#40;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;となるような、一般的な&lt;code&gt;func2&lt;/code&gt;を定義できる。Scalaでも、&lt;code&gt;func1&lt;/code&gt;を持つようなオブジェクトを一般的に引き受けるような関数を定義したい。&lt;/p&gt;&lt;p&gt;class Aやclass Bの定義を変更することなしに。そして、関数&lt;code&gt;func1&lt;/code&gt;を持つオブジェクトは知らされることなく常に増えていく。。。 もちろん、(Javaの)interfaceや(Scalaの)traitだとfunc2に与えられるオブジェクトのクラス全てにinterfaceを付けなければいけない。&lt;/p&gt;&lt;p&gt;例えば、idとnameを持つようなRow型について考える。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;case class AbcRow&amp;#40;id: Long, name: String, paramA: String, paramB: String&amp;#41;
case class DefRow&amp;#40;id: Long, name: String, idA: Int, flagB: Boolean&amp;#41;
case class GhiRow&amp;#40;id: Long, name: String, id: Long&amp;#41;
case class JklRow&amp;#40;id: Long, name: String, messageA: String&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;このRowのリスト(Seq[AbcRow]やSeq[DefRow]のようなオブジェクト)から、 idとnameのタプルのリストを抽出する一般的な関数を定義したい。。。&lt;/p&gt;&lt;p&gt;この場合、次のような関数を定義できる。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;def getIdName&amp;#91;R &amp;lt;: {val id: Long; val name: String;}&amp;#93;&amp;#40;rows: Seq&amp;#91;R&amp;#93;&amp;#41;: Seq&amp;#91;&amp;#40;Long, String&amp;#41;&amp;#93; =
    rows.map { row =&amp;gt; &amp;#40;row.id, row.name&amp;#41; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これは次のようにも書ける。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;def getIdName&amp;#40;rows: Seq&amp;#91;{val id: Long; val name: String;}&amp;#93;&amp;#41;: Seq&amp;#91;&amp;#40;Long, String&amp;#41;&amp;#93; =
    rows.map { row =&amp;gt; &amp;#40;row.id, row.name&amp;#41; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Long型のidとString型のnameを持つ最も一般的な型を引数にもち、その型のインスタンスからidとnameを抽出する関数を定義できる。 他の型(クラス)定義を書き換えること無く、アドホックに静的な型チェックを維持した関数を定義できる。 (Duck-typingの性質を引き継げる。) 次のように実行する。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; val row = Seq&amp;#40;AbcRow&amp;#40;1, &amp;quot;a&amp;quot;, &amp;quot;paramA&amp;quot;, &amp;quot;paramB&amp;quot;&amp;#41;, AbcRow&amp;#40;2, &amp;quot;b&amp;quot;, &amp;quot;paramA&amp;quot;, &amp;quot;paramB&amp;quot;&amp;#41;, AbcRow&amp;#40;3, &amp;quot;c&amp;quot;, &amp;quot;paramA&amp;quot;, &amp;quot;paramB&amp;quot;&amp;#41;&amp;#41;;
row: Seq&amp;#91;AbcRow&amp;#93; = List&amp;#40;AbcRow&amp;#40;1,a,paramA,paramB&amp;#41;, AbcRow&amp;#40;2,b,paramA,paramB&amp;#41;, AbcRow&amp;#40;3,c,paramA,paramB&amp;#41;&amp;#41;
scala&amp;gt; getIdName&amp;#40;row&amp;#41;
res3: Seq&amp;#91;&amp;#40;Long, String&amp;#41;&amp;#93; = List&amp;#40;&amp;#40;1,a&amp;#41;, &amp;#40;2,b&amp;#41;, &amp;#40;3,c&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;条件を満たす型(データ型)を定義しておき、テンプレートを書く。&lt;/li&gt;&lt;li&gt;(余談)この辺の型の推論をOCamlだと自動でやってくれる。。。Scalaは割と自分で書かないといけないという面倒くささはある。&lt;/li&gt;&lt;li&gt;上記以外だとローンパターン(ローンパターン自体は、構造的部分型の特殊な利用パターンの一種)などで頻繁に使うことができる。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;scalaの3つのdependent&amp;#95;&lt;em&gt;&amp;#95;type&quot;&gt;Scalaの3つのdependent &lt;/em&gt; type&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://wheaties.github.io/Presentations/Scala-Dep-Types/dependent-types.html#/'&gt;Dependent Types in Scala&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Scalaのdependent type。(普通、関数型言語で言われる所の依存型とは違う)&lt;/li&gt;&lt;li&gt;path-dependent type&lt;ul&gt;&lt;li&gt;生成された経路によって、同じpackageの同一オブジェクト(クラス)の型の場合でも、別々の型とみなされる。&lt;/li&gt;&lt;li&gt;&lt;a href='https://stackoverflow.com/questions/2693067/what-is-meant-by-scalas-path-dependent-types'&gt;What is meant by Scala's path-dependent types? - StackOverFlow&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;dependent method type&lt;ul&gt;&lt;li&gt;&lt;a href='https://gist.github.com/xuwei-k/1306328/82530a4d2451b68a17f7c03448d6ab88da0bc575'&gt;Scala dependent method types ? - Gist&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;dependent object type&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/namin/dot'&gt;Dependent Object Types (DOT)&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&quot;The DOT calculus proposes a new type-theoretic foundation for languages like Scala.&quot;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Dotty向けの型システム。Scala3以降の話なので今回は言及しない。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;型推論という点ではHaskellやOCamlにはかなわない(?)ものの、様々なケースで静的に型付けしながらも柔軟な型定義を実現するための  仕組みが備わっている事がわかる。&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Fri, 20 Apr 2018 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
https://yuwki0131.github.io/posts-output/2018-04-19-gcp-nlp-api/
</guid>
<link>
https://yuwki0131.github.io/posts-output/2018-04-19-gcp-nlp-api/
</link>
<title>
GCPのNLP APIを使ってみる
</title>
<description>
&lt;p&gt;GCPのnlp apiを使ってみた。Yahooの形態素解析APIと同様、結構簡単に使うことができる。&lt;/p&gt;&lt;p&gt;&lt;a href='https://cloud.google.com/natural-language/?hl=ja'&gt;Cloud Natural Language | Google Cloud&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;使い方&quot;&gt;使い方&lt;/h2&gt;&lt;p&gt;リクエストのurlは以下のような感じ。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;https://language.googleapis.com/v1/documents:analyzeSyntax?key=ここにAPIキーが入る
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以下がPOSTするJSON。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{
  &amp;quot;document&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;PLAIN&amp;#95;TEXT&amp;quot;,
    &amp;quot;content&amp;quot;: &amp;quot;健三が遠い所から帰って来て駒込の奥に世帯を持ったのは東京を出てから何年目になるだろう。彼は故郷の土を踏む珍らしさのうちに一種の淋し味さえ感じた。&amp;quot;
  },
  &amp;quot;encodingType&amp;quot;: &amp;quot;UTF8&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;次のレスポンスが返ってくる。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{
    &amp;quot;sentences&amp;quot;: &amp;#91;
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;健三が遠い所から帰って来て駒込の奥に世帯を持ったのは東京を出てから何年目になるだろう。&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 0
            }
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;彼は故郷の土を踏む珍らしさのうちに一種の淋し味さえ感じた。&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 129
            }
        }
    &amp;#93;,
    &amp;quot;tokens&amp;quot;: &amp;#91;
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;健三&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 0
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;NOUN&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 5,
                &amp;quot;label&amp;quot;: &amp;quot;NSUBJ&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;健三&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;が&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 6
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;NOMINATIVE&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 0,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;が&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;遠い&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 9
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;ADJ&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;ADNOMIAL&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 3,
                &amp;quot;label&amp;quot;: &amp;quot;AMOD&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;遠い&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;所&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 15
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;NOUN&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 5,
                &amp;quot;label&amp;quot;: &amp;quot;ADVPHMOD&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;所&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;から&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 18
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;ADVERBIAL&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 3,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;から&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;帰っ&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 24
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;VERB&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;GERUND&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 15,
                &amp;quot;label&amp;quot;: &amp;quot;ADVCL&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;帰っ&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;て&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 30
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 5,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;て&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;来&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 33
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;VERB&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;GERUND&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 5,
                &amp;quot;label&amp;quot;: &amp;quot;AUXVV&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;来る&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;て&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 36
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 5,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;て&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;駒込&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 39
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;NOUN&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 11,
                &amp;quot;label&amp;quot;: &amp;quot;NN&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;駒込&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;の&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 45
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;GENITIVE&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 9,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;の&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;奥&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 48
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;NOUN&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 15,
                &amp;quot;label&amp;quot;: &amp;quot;ADVPHMOD&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;奥&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;に&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 51
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;ADVERBIAL&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 11,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;に&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;世帯&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 54
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;NOUN&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 15,
                &amp;quot;label&amp;quot;: &amp;quot;DOBJ&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;世帯&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;を&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 60
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;ACCUSATIVE&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 13,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;を&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;持っ&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 63
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;VERB&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;GERUND&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 17,
                &amp;quot;label&amp;quot;: &amp;quot;NOMC&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;持っ&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;た&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 69
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;VERB&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;ADNOMIAL&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;PAST&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 15,
                &amp;quot;label&amp;quot;: &amp;quot;AUX&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;た&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;の&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 72
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 28,
                &amp;quot;label&amp;quot;: &amp;quot;NOMCSUBJ&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;の&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;は&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 75
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 17,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;は&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;東京&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 78
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;NOUN&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 21,
                &amp;quot;label&amp;quot;: &amp;quot;DOBJ&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;東京&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;を&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 84
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;ACCUSATIVE&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 19,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;を&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;出&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 87
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;VERB&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;GERUND&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 28,
                &amp;quot;label&amp;quot;: &amp;quot;ADVCL&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;出る&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;て&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 90
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 21,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;て&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;から&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 93
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;ADVERBIAL&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 21,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;から&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;何&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 99
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRON&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 28,
                &amp;quot;label&amp;quot;: &amp;quot;ATTR&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;何&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;年&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 102
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;AFFIX&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 24,
                &amp;quot;label&amp;quot;: &amp;quot;SNUM&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;年&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;目&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 105
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;AFFIX&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 24,
                &amp;quot;label&amp;quot;: &amp;quot;SUFF&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;目&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;に&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 108
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;COMPLEMENTIVE&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 24,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;に&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;なる&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 111
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;VERB&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FINAL&amp;#95;ENDING&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 28,
                &amp;quot;label&amp;quot;: &amp;quot;ROOT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;なる&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;だろ&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 117
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;VERB&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;IRREALIS&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 28,
                &amp;quot;label&amp;quot;: &amp;quot;AUX&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;だろ&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;う&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 123
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;VERB&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FINAL&amp;#95;ENDING&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 28,
                &amp;quot;label&amp;quot;: &amp;quot;AUX&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;う&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;。&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 126
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PUNCT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 28,
                &amp;quot;label&amp;quot;: &amp;quot;P&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;。&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;彼&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 129
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRON&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;THIRD&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 50,
                &amp;quot;label&amp;quot;: &amp;quot;NSUBJ&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;彼&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;は&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 132
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 32,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;は&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;故郷&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 135
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;NOUN&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 36,
                &amp;quot;label&amp;quot;: &amp;quot;NN&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;故郷&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;の&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 141
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;GENITIVE&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 34,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;の&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;土&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 144
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;NOUN&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 38,
                &amp;quot;label&amp;quot;: &amp;quot;DOBJ&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;土&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;を&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 147
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;ACCUSATIVE&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 36,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;を&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;踏む&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 150
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;VERB&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;ADNOMIAL&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 40,
                &amp;quot;label&amp;quot;: &amp;quot;RCMOD&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;踏む&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;珍&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 156
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;NOUN&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 40,
                &amp;quot;label&amp;quot;: &amp;quot;DEP&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;珍&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;らし&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 159
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;ADJ&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;SPECIFIC&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 43,
                &amp;quot;label&amp;quot;: &amp;quot;NN&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;らし&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;さ&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 165
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;AFFIX&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 40,
                &amp;quot;label&amp;quot;: &amp;quot;SUFF&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;さ&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;の&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 168
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;GENITIVE&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 40,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;の&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;うち&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 171
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;NOUN&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 50,
                &amp;quot;label&amp;quot;: &amp;quot;ADVPHMOD&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;うち&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;に&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 177
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;ADVERBIAL&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 43,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;に&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;一種&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 180
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;NOUN&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 48,
                &amp;quot;label&amp;quot;: &amp;quot;NN&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;一種&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;の&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 186
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;GENITIVE&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 45,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;の&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;淋し&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 189
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;NOUN&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 48,
                &amp;quot;label&amp;quot;: &amp;quot;DEP&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;淋し&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;味&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 195
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;NOUN&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 50,
                &amp;quot;label&amp;quot;: &amp;quot;NSUBJ&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;味&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;さえ&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 198
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PRT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 48,
                &amp;quot;label&amp;quot;: &amp;quot;PRT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;さえ&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;感じ&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 204
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;VERB&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;GERUND&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 50,
                &amp;quot;label&amp;quot;: &amp;quot;ROOT&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;感じる&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;た&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 210
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;VERB&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FINAL&amp;#95;ENDING&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;PAST&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 50,
                &amp;quot;label&amp;quot;: &amp;quot;AUX&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;た&amp;quot;
        },
        {
            &amp;quot;text&amp;quot;: {
                &amp;quot;content&amp;quot;: &amp;quot;。&amp;quot;,
                &amp;quot;beginOffset&amp;quot;: 213
            },
            &amp;quot;partOfSpeech&amp;quot;: {
                &amp;quot;tag&amp;quot;: &amp;quot;PUNCT&amp;quot;,
                &amp;quot;aspect&amp;quot;: &amp;quot;ASPECT&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;case&amp;quot;: &amp;quot;CASE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;form&amp;quot;: &amp;quot;FORM&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;gender&amp;quot;: &amp;quot;GENDER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;mood&amp;quot;: &amp;quot;MOOD&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;number&amp;quot;: &amp;quot;NUMBER&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;person&amp;quot;: &amp;quot;PERSON&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;proper&amp;quot;: &amp;quot;NOT&amp;#95;PROPER&amp;quot;,
                &amp;quot;reciprocity&amp;quot;: &amp;quot;RECIPROCITY&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;tense&amp;quot;: &amp;quot;TENSE&amp;#95;UNKNOWN&amp;quot;,
                &amp;quot;voice&amp;quot;: &amp;quot;VOICE&amp;#95;UNKNOWN&amp;quot;
            },
            &amp;quot;dependencyEdge&amp;quot;: {
                &amp;quot;headTokenIndex&amp;quot;: 50,
                &amp;quot;label&amp;quot;: &amp;quot;P&amp;quot;
            },
            &amp;quot;lemma&amp;quot;: &amp;quot;。&amp;quot;
        }
    &amp;#93;,
    &amp;quot;language&amp;quot;: &amp;quot;ja&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ちなみに、Chromeには、Restlet ClientというChrome拡張があり、簡単にRestful APIを叩く事ができる。&lt;/p&gt;&lt;p&gt;&lt;a href='https://chrome.google.com/webstore/detail/restlet-client-rest-api-t/aejoelaoggembcahagimdiliamlcdmfm'&gt;Restlet Client - REST API Testing - Chrome ウェブストア&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;感想&quot;&gt;感想&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;ローカルなど各環境にmecabやjumanをインストールしなくても簡単に自然言語処理を行うことができる。&lt;/li&gt;&lt;li&gt;通常、お金がかかってしまうが、まあ、仕方がない。&lt;/li&gt;&lt;li&gt;構文解析/形態素解析だけでなく、感情分析やエンティティ認識など様々な機能がデフォルトでついてくるので、  色々使えそうではある。&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Thu, 19 Apr 2018 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
https://yuwki0131.github.io/posts-output/2018-04-18-scala-implicit/
</guid>
<link>
https://yuwki0131.github.io/posts-output/2018-04-18-scala-implicit/
</link>
<title>
Scalaの3つのimplicit
</title>
<description>
&lt;p&gt;Scalaについて勉強した時のメモ(その5)です。Scalaのimplicitと呼ばれる系の機能について。&lt;/p&gt;&lt;p&gt;※ 元々はmarkdownで書いていたテキストの転載。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://qiita.com/tagia0212/items/f70cf68e89e4367fcf2e'&gt;Scala implicit修飾子 まとめ - Qiita&lt;/a&gt;&lt;/li&gt;&lt;li&gt;implicit conversion, implicit class, implicit parameterがある。&lt;/li&gt;&lt;li&gt;implicit: 暗黙の〜&lt;/li&gt;&lt;li&gt;implicit修飾子を付けて定義した場合、コンパイラが適宜、必要なメソッドや型を探索して自動的に適用してくれる。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;暗黙の型変換(implicit&amp;#95;conversion)&quot;&gt;暗黙の型変換(implicit conversion)&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;型変換(キャスト)する関数をimplicitに定義しておくことで自動的にキャストしてくれる。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;暗黙の型変換の定義。&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;implicit def d2i&amp;#40;d: Double&amp;#41;:Int = d.toInt
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;implicit定義前。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; val x:Int = 3.14
&amp;lt;console&amp;gt;:11: error: type mismatch;
 found   : Double&amp;#40;3.14&amp;#41;
 required: Int
       val x:Int = 3.14
                   &amp;#94;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;implicit定義後。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; val x:Int = 3.14
x: Int = 3
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;暗黙の型変換は推奨されていない/しない人が多い。&lt;ul&gt;&lt;li&gt;公式のドキュメントですら、&quot;implicit conversions can have pitfalls&quot;と書かれている。&lt;ul&gt;&lt;li&gt;&lt;a href='https://docs.scala-lang.org/tour/implicit-conversions.html'&gt;TOUR OF SCALA IMPLICIT CONVERSIONS | Scala Documentation&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;implicit conversionに対する否定的なコメント。&lt;ul&gt;&lt;li&gt;&lt;a href='http://blog.livedoor.jp/sylc/archives/1553449.html'&gt;Scalaのimplicit conversionってなんだ？&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://kmizu.hatenablog.com/entry/2017/05/19/074149'&gt;Scalaでimplicits呼ぶなキャンペーン&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://qiita.com/tagia0212/items/f70cf68e89e4367fcf2e'&gt;Scala implicit修飾子 まとめ - Qiita&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;拡張メソッド(implicit&amp;#95;class&amp;#95;/&amp;#95;既存の型を拡張する)&quot;&gt;拡張メソッド(implicit class / 既存の型を拡張する)&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;既存の型を拡張し、メソッドを追加する。&lt;ul&gt;&lt;li&gt;pimp my libraryパターンと言われる。&lt;/li&gt;&lt;li&gt;ちなみに、C#やTypeScriptにも同名の類似した機能がある。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;レシーバにメソッドを生やす事ができるのが特徴。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;String型に、空文字ならNone、文字があればSomeで値を包む関数を定義したい場合、以下のように拡張できる。&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;implicit class OptionString&amp;#40;str: String&amp;#41;{
  def opt&amp;#40;&amp;#41;: Option&amp;#91;String&amp;#93; = if &amp;#40;str.isEmpty&amp;#41; None else Some&amp;#40;str&amp;#41;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;これは、次のように使える。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; &amp;quot;&amp;quot;.opt
res2: Option&amp;#91;String&amp;#93; = None

scala&amp;gt; &amp;quot;abc&amp;quot;.opt
res3: Option&amp;#91;String&amp;#93; = Some&amp;#40;abc&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上記の場合、&lt;code&gt;OptionString&lt;/code&gt;の名前自体には特に意味はない。&lt;code&gt;str: String&lt;/code&gt;がレシーバを表している。 よりGenericに書きたい場合は、型パラメータを入れられる。&lt;/p&gt;&lt;h2 id=&quot;暗黙のパラメータ(implicit&amp;#95;parameter)&quot;&gt;暗黙のパラメータ(implicit parameter)&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;暗黙に受け渡しされる引数。&lt;/li&gt;&lt;li&gt;implicit修飾子により定義された変数を暗黙的にimplicit修飾子が付けられた引数に代入する。&lt;/li&gt;&lt;li&gt;単に暗黙的に引数を補完するだけだが、暗黙のパラメータを応用することで型クラスを実装することができる。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;次のコードでは、二番目の引数をimplicitとしている。&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; implicit val x = 20
x: Int = 20

scala&amp;gt; def f&amp;#40;a: Int&amp;#41;&amp;#40;implicit b: Int&amp;#41;:Int = a + b
f: &amp;#40;a: Int&amp;#41;&amp;#40;implicit b: Int&amp;#41;Int

scala&amp;gt; f&amp;#40;1&amp;#41;
res4: Int = 21
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;コンパイラが自動的に暗黙のパラメータを認識し、必要としている時に自動的にimplicitパラメータを探索する。&lt;/li&gt;&lt;li&gt;(多分)静的型付言語に動的スコープを導入したような物(?)&lt;ul&gt;&lt;li&gt;&lt;a href='https://galois.com/wp-content/uploads/2014/08/pub_JL_ImplicitParameters.pdf'&gt;Implicit Parameters: Dynamic Scoping with Static Types&lt;/a&gt; というタイトルの論文がある。&lt;/li&gt;&lt;li&gt;関数を実行する場所やその瞬間によって値をコロコロ変えることが出来る。&lt;/li&gt;&lt;li&gt;暗黙のパラメータ自体は、Haskellの型クラスをエミュレートするために実装されたらしい。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;引数の数が大量にある、または、同じような引数を取る関数を大量に呼び出している時などに有効と思われる。&lt;/li&gt;&lt;li&gt;割とホントに見えない所で代入が発生しているので、普段意識せずに使ってる人が多そうな機能の一つだと思われる(Futureなど)。&lt;/li&gt;&lt;li&gt;暗黙のパラメータに関するエラー&lt;ul&gt;&lt;li&gt;暗黙のパラメータを必要としているにもかかわらず、必要となるimplicitな変数が定義されていない場合はエラーが出る。&lt;ul&gt;&lt;li&gt;あるクラスの関数を別のクラスの関数に移した時などに、この手のエラーがよく発生する。&lt;/li&gt;&lt;li&gt;移植元のimplicitな変数と移植先のimplicitの変数の何が違うかを考えると見つけやすい。エラーメッセージもヒントになる。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;暗黙のパラメータによる複数の代入候補が存在する場合にもエラーが発生する。(一応優先順位はあるらしいが)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;暗黙のパラメータによる代入を許したくない場合は、明示的に引数を指定することでそれを回避できる。前述の例で言うと、次のように書けば、暗黙のパラメータは回避される。&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; f&amp;#40;1&amp;#41;&amp;#40;30&amp;#41;
res5: Int = 31
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;implicit parameterを使用することで、型クラスを構成できる。(←ここが重要)&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Wed, 18 Apr 2018 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
https://yuwki0131.github.io/posts-output/2018-04-18-scala-for/
</guid>
<link>
https://yuwki0131.github.io/posts-output/2018-04-18-scala-for/
</link>
<title>
Scalaのfor式/for内包記法(For comprehension)
</title>
<description>
&lt;p&gt;Scalaについて勉強した時のメモ(その4)です。for式の扱い方について。&lt;/p&gt;&lt;p&gt;※ 元々はmarkdownで書いていたテキストの転載。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;for {
  a &amp;lt;- abcDao.find&amp;#40;id&amp;#41;
  b &amp;lt;- abcDao.find&amp;#40;a&amp;#41;
} yeild f&amp;#40;a, b&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;Scalaのfor文はJavaなどと同様に、foreach文の役割を持つ。&lt;/li&gt;&lt;li&gt;Haskellのdo記法に由来するという話をどこかで読んだ気がするが出典は不明。&lt;/li&gt;&lt;li&gt;ただし、yield節を追加することで、for-yield式(for内包記法)となり、map/flatMap/filter(With)を使ったジェネレータとなる。&lt;ul&gt;&lt;li&gt;基本的にはListのジェネレータを他のデータ型(OptionやFuture)向けに一般化したものとして考えるのが筋のような気がする    (が実際のところは分からない)。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;map/flatMap/withFilter等が定義されたデータ型に対して、これらの関数を使用したコードの別の書き方を提供する。&lt;ul&gt;&lt;li&gt;よくTwitterなどでモナドがほしいという人がいるが、実は本当に求めているのは、モナドそのものではなく、    このfor-yield風の構文(Haskellだとdo記法)の事だったりする(らしい)。。。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;FutureやOption、Eitherなどでは、後続の処理を記述するためにmap/flatMapを使用する。  しかし、このような書き方は、ネストが深くなると、可読性が落ち、括弧の対応関係を追いづらくなる。  (いわゆるJavaScriptで言うところのcallback地獄?)  また、どの結果がどの変数に代入されているかも読み取ることが難しくなる。&lt;/li&gt;&lt;li&gt;for式を導入することで、変数束縛の対応関係が明確になり、括弧の数が減少し、処理の流れが明確になる。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;例えば、このネスト。&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;abcDao.find&amp;#40;id&amp;#41; // 戻り値はFuture&amp;#91;Option&amp;#91;String&amp;#93;&amp;#93;
  .flatMap {
    case a =&amp;gt; a.map&amp;#40;f&amp;#41;  // aはOption&amp;#91;String&amp;#93;
      .map {
        case b =&amp;gt; abcDao.findByName&amp;#40;b&amp;#41; // 戻り値は、Future&amp;#91;Option&amp;#91;String&amp;#93;&amp;#93;
          .map { c =&amp;gt;　&amp;#40;a, c&amp;#41; } }.getOrElse&amp;#40; ... &amp;#41; }
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;for式で書き換えることで各関係が明確になる。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;for {
  a &amp;lt;- abcDao.find&amp;#40;id&amp;#41;
  b = a.map&amp;#40;f&amp;#41;
  c &amp;lt;- abcDao.findByName&amp;#40;b&amp;#41;
} yield &amp;#40;a, c&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;for式は、コンテクストとなる型(コンストラクタ)は必ず一つしか持てない。&lt;ul&gt;&lt;li&gt;Future用のfor式は、Future型専用、Option型のfor式は、Option型専用になる。&lt;/li&gt;&lt;li&gt;Scalazのモナド変換子だと複数のコンテクストを合成した(複数のコンテクストを持つ)新たなのコンテクストを作ることも可能。。。    例えば、FutureとEitherを組み合わせたfor式が使える: &lt;a href='http://koff.io/posts/290071-make-async-with-scalaz-either-and-futures/'&gt;Practical Scalaz: Make async operations with scalaz.Either and Futures · KOFF.io&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;yieldの手前のfor式内で使える記法は、主に3つ。そして最後にyield節がくる。&lt;ul&gt;&lt;li&gt;flatMap: &lt;code&gt;a &amp;lt;- b&lt;/code&gt;    : for式と同じコンテクストの型(コンストラクタ)を持つ式(&lt;code&gt;b&lt;/code&gt;)があり、その結果がfor式内でアンラップされた変数&lt;code&gt;a&lt;/code&gt;に代入される。&lt;/li&gt;&lt;li&gt;map: &lt;code&gt;a = b&lt;/code&gt;    : for式が表しているコンテクストとは無関係な型を持つ&lt;code&gt;b&lt;/code&gt;を変数&lt;code&gt;a&lt;/code&gt;に代入する。&lt;/li&gt;&lt;li&gt;filter(With): &lt;code&gt;if exp&lt;/code&gt;    : ガード節。filterとも言う。&lt;code&gt;exp&lt;/code&gt;がfalseだった場合、後続の処理を実行しない。(FutureだとFailureとなる)&lt;ul&gt;&lt;li&gt;&lt;a href='https://stackoverflow.com/questions/17869624/scala-future-with-filter-in-for-comprehension'&gt;Scala Future with filter in for comprehension - StackOverFlow&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;yield(map)    : yield節の式の結果をfor式の型(コンストラクタ)でラップした結果を返す。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;関連したテクニック&lt;ul&gt;&lt;li&gt;式の実行結果が不要な場合は、次のようにアンダースコアを使う事で、余計な変数を避けることが出来る。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;for {
  &amp;#95; &amp;lt;- abcDao.find&amp;#40;id&amp;#41;
} yield ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;_を使うことで余計な束縛を回避している。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;for式中の=形式の束縛は、for式内でfor式のコンテクストとは無関係な処理を実行できる。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;次の書き方、&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;for {
  〜
  b　= methodA&amp;#40;a&amp;#41;
} yield ...
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;は、Futureがコンテクストの場合、以下の書き方と同じ。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;for {
  〜
  b　&amp;lt;- Future { methodA&amp;#40;a&amp;#41; }
} yield ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;flatMapがmapになっていることが分かる。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;for式はネストしたmap/flatMap/fiterWith(filter)に変換される。&lt;ul&gt;&lt;li&gt;このため、mapが複雑にネストするケースやflatMapやfilterを多用するコードは、for式の使用を検討したほうがいい。&lt;ul&gt;&lt;li&gt;プログラムがネストしすぎるのは可読性の観点から好ましくないため。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;一般的には、map/flatMapなどのネストよりはコードが読みやすくなる(はず)。&lt;/li&gt;&lt;li&gt;&lt;a href='http://scala-lang.org/files/archive/spec/2.12/06-expressions.html'&gt;For Comprehensions and For Loops&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;for式がある時、&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;for {
  a &amp;lt;- abcDao.find&amp;#40;id&amp;#41;
  b &amp;lt;- abcDao.find&amp;#40;a&amp;#41;
} yeild f&amp;#40;a, b&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;コンパイル時に次のように、map/flatMapに展開される。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;abcDao.find&amp;#40;id&amp;#41;
  .flatMap {
    case a =&amp;gt; abcDao.find&amp;#40;a&amp;#41;
      .map { case b =&amp;gt; f&amp;#40;a, b&amp;#41; } }
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;(その他)Try型を使うことで例外もfor-yield形式で書ける。&lt;ul&gt;&lt;li&gt;&lt;a href='https://www.slideshare.net/TakashiKawachi/scala-16023052'&gt;Scalaでの例外 - SlideShare&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Wed, 18 Apr 2018 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
https://yuwki0131.github.io/posts-output/2018-04-14-scala-functions-memo/
</guid>
<link>
https://yuwki0131.github.io/posts-output/2018-04-14-scala-functions-memo/
</link>
<title>
Scalaでの関数のしくみと使い方
</title>
<description>
&lt;p&gt;Scalaについて勉強した時のメモ(その1)です。関数の扱い方について。&lt;/p&gt;&lt;p&gt;※ 元々はmarkdownで書いていたテキストの転載。&lt;/p&gt;&lt;h2 id=&quot;再帰(recursion)&quot;&gt;再帰(Recursion)&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;再帰とは自分自身を自分自身の中に持つような構造。&lt;ul&gt;&lt;li&gt;&lt;a href='https://ja.wikipedia.org/wiki/%E5%86%8D%E5%B8%B0'&gt;再帰 - Wikipedia&lt;/a&gt;&lt;/li&gt;&lt;li&gt;関数型プログラミングでは、再帰的なデータ型と(関数の)再帰呼出しがよく使われる。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;再帰呼出し&quot;&gt;再帰呼出し&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;呼び出し元の関数が自分自身を呼び出すこと。&lt;/li&gt;&lt;li&gt;Scalaでの再帰呼出し。次のような階乗を行う関数の場合。&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;def fact1&amp;#40;n: Int&amp;#41;: Int = if &amp;#40;n &amp;lt; 1&amp;#41;{
  1
} else {
  n &amp;#42; fact1&amp;#40;n - 1&amp;#41;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;Scalaでのループはコレクション関数を使用が(多分)殆どなので、再帰呼出しはあまり使わないが、稀に使う。&lt;/li&gt;&lt;li&gt;再帰呼出しは(一般に)関数型プログラミングとの相性が良い。&lt;ul&gt;&lt;li&gt;変数に再代入しないため、変数を常にimmutableにしたままループが書ける。&lt;/li&gt;&lt;li&gt;再帰的なデータ型に対して、関数の再帰呼出しは相性が良い。(再帰的なデータ型を定義し、再帰呼出しで再帰的にトラバースできる)&lt;/li&gt;&lt;li&gt;プログラムを帰納的(余帰納的)に定義できる。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;木構造のような再帰的なデータ型や、分割統治法を使ったアルゴリズムの場合は、再帰を使うとわかりやすいコードが書ける。&lt;ul&gt;&lt;li&gt;分割統治法&lt;ul&gt;&lt;li&gt;大きな問題を小さな部分問題に分割し、個々の小さな部分問題を解決しながら、      その部分問題の解答結果のマージを繰り返し、最終的に元の問題を解くようなアルゴリズム。&lt;/li&gt;&lt;li&gt;&lt;a href='https://ja.wikipedia.org/wiki/%E5%88%86%E5%89%B2%E7%B5%B1%E6%B2%BB%E6%B3%95'&gt;分割統治法 - Wikipedia&lt;/a&gt;&lt;/li&gt;&lt;li&gt;次のクイックソートが典型例。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;クイックソート(あるいは、関数型プログラミングにおける偽のクイックソート)&lt;ul&gt;&lt;li&gt;Javaでクイックソート:      &lt;a href='https://qiita.com/gigegige/items/4817c27314a2393eb02d'&gt;【Java】クイックソートのアルゴリズムのテスト - Qiita&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Scalaで関数型プログラミングのスタイルのクイックソート&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;def quicksort&amp;#91;A&amp;#93;&amp;#40;ls: Seq&amp;#91;A&amp;#93;&amp;#41;&amp;#40;implicit ord: Ordering&amp;#91;A&amp;#93;&amp;#41;: Seq&amp;#91;A&amp;#93; = ls match {
    case Nil =&amp;gt; Nil
    case a::as =&amp;gt; &amp;#40;quicksort&amp;#40;as.filter&amp;#40;ord.lt&amp;#40;&amp;#95;, a&amp;#41;&amp;#41;&amp;#41;
                   ++ Seq&amp;#40;a&amp;#41; ++ quicksort&amp;#40;as.filter&amp;#40;ord.gteq&amp;#40;&amp;#95;, a&amp;#41;&amp;#41;&amp;#41;&amp;#41;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これは普通の関数同様に実行する。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; quicksort&amp;#40;List&amp;#40;5, 6, 7, 4, 3, 10, 2, 8, 0, 3&amp;#41;&amp;#41;
res38: Seq&amp;#91;Int&amp;#93; = List&amp;#40;0, 2, 3, 3, 4, 5, 6, 7, 8, 10&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;上記は偽のクイックソート(理由はググッて下さい)。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;木構造のデータ型&amp;#95;+&amp;#95;matchによるパターンマッチで再帰を使う例&quot;&gt;木構造のデータ型 + matchによるパターンマッチで再帰を使う例&lt;/h3&gt;&lt;p&gt;木構造で、木の末尾を&lt;code&gt;Leaf&lt;/code&gt;、枝を&lt;code&gt;Node&lt;/code&gt;としてcase classで定義する。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;sealed trait Tree&amp;#91;+A&amp;#93;
case class Leaf&amp;#91;A&amp;#93;&amp;#40;value: A&amp;#41; extends Tree&amp;#91;A&amp;#93;
case class Node&amp;#91;A&amp;#93;&amp;#40;left: Tree&amp;#91;A&amp;#93;, right: Tree&amp;#91;A&amp;#93;&amp;#41; extends Tree&amp;#91;A&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;木に対する走査の処理。 具体的にどのように走査した結果を得るかは、抽象化する。&lt;code&gt;f: &amp;#40;A, A&amp;#41; =&amp;gt; A&lt;/code&gt;の箇所。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;def sum&amp;#91;A&amp;#93;&amp;#40;t: Tree&amp;#91;A&amp;#93;, f: &amp;#40;A, A&amp;#41; =&amp;gt; A&amp;#41;: A = t match {
  case Leaf&amp;#40;a&amp;#41; =&amp;gt; a
  case Node&amp;#40;l, r&amp;#41; =&amp;gt; f&amp;#40;sum&amp;#40;l, f&amp;#41;, sum&amp;#40;r, f&amp;#41;&amp;#41;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以下のように使用する。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; val d = Node&amp;#40;Node&amp;#40;Leaf&amp;#40;10&amp;#41;, Leaf&amp;#40;20&amp;#41;&amp;#41;, Leaf&amp;#40;1&amp;#41;&amp;#41;
d: Node&amp;#91;Int&amp;#93; = Node&amp;#40;Node&amp;#40;Leaf&amp;#40;10&amp;#41;,Leaf&amp;#40;20&amp;#41;&amp;#41;,Leaf&amp;#40;1&amp;#41;&amp;#41;

scala&amp;gt; sum&amp;#40;d, &amp;#40;a:Int, b:Int&amp;#41; =&amp;gt; a + b&amp;#41;
res36: Int = 31
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以下は、String型で文字列を返す例。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; val e = Node&amp;#40;Node&amp;#40;Leaf&amp;#40;&amp;quot;a&amp;quot;&amp;#41;, Leaf&amp;#40;&amp;quot;b&amp;quot;&amp;#41;&amp;#41;, Leaf&amp;#40;&amp;quot;c&amp;quot;&amp;#41;&amp;#41;
e: Node&amp;#91;String&amp;#93; = Node&amp;#40;Node&amp;#40;Leaf&amp;#40;a&amp;#41;,Leaf&amp;#40;b&amp;#41;&amp;#41;,Leaf&amp;#40;c&amp;#41;&amp;#41;

scala&amp;gt; sum&amp;#40;e, &amp;#40;a: String, b: String&amp;#41; =&amp;gt; &amp;quot;&amp;#40;&amp;quot; ++ a ++ &amp;quot; &amp;quot; ++ b ++ &amp;quot;&amp;#41;&amp;quot;&amp;#41;
res44: String = &amp;#40;&amp;#40;a b&amp;#41; c&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;末尾最適化(tail&amp;#95;call&amp;#95;optimization)&quot;&gt;末尾最適化(Tail call optimization)&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;関数型言語で行われるコンパイラの処理の一種。&lt;/li&gt;&lt;li&gt;末尾再帰形式は関数呼び出し時に、stackを必要としないような再帰呼出しの形式。&lt;ul&gt;&lt;li&gt;自分自身を再帰的に呼び出す際にその呼び出し以外の処理が残っていない形で自分自身を呼び出すような関数呼び出し形。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;再帰呼出しは、コンパイル時に「末尾再帰」形式になっている場合、コンパイル時に(whileのような)スタックを消費しないループに変換される。&lt;ul&gt;&lt;li&gt;ループに変換されない場合、通常の関数呼び出しの連鎖となり、stackを消費してしまい、StackOVerFlowErrorになってしまう。&lt;/li&gt;&lt;li&gt;ループ回数が多い場合(JVMの場合、1000〜数千回以上)の場合は、末尾再帰形式でループを記述しないと、StackOverFlowになる。&lt;ul&gt;&lt;li&gt;個人的な経験則だと1000回未満のループだと、SOFにはならない事が多い。(勿論、実装による部分が大きい)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;大量にループを繰り返す場合は末尾再帰が必須となる。&lt;/li&gt;&lt;li&gt;stackを消費しすぎないタイプのループの場合は、この限りではない。(関数呼び出しで消費したStackが戻される場合など。)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Scalaの再帰は末尾最適化をする場合としない(できない)場合。&lt;ul&gt;&lt;li&gt;末尾再帰形式になっていない場合は、末尾最適化が行われない。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;次のような階乗を行う関数の場合。(10の階乗(fact(10))は、10! = 1 &lt;em&gt; 2 &lt;/em&gt; 3 &lt;em&gt; 4 &lt;/em&gt; 5 &lt;em&gt; 6 &lt;/em&gt; 7 &lt;em&gt; 8 &lt;/em&gt; 9 * 10)&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;def fact1&amp;#40;n: Int&amp;#41;: Int = if &amp;#40;n &amp;lt; 1&amp;#41;{
  1
} else {
  n &amp;#42; fact1&amp;#40;n - 1&amp;#41;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;次の例は、自分自身を呼び出しのみ、かつ末尾再帰形式になっている場合。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;def fact2&amp;#40;n: Int, a: Int&amp;#41;: Int = if &amp;#40;n &amp;lt; 1&amp;#41;{
  a
} else {
  fact2&amp;#40;n - 1, n &amp;#42; a&amp;#41;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;計算結果を保持する変数(アキュームレータ)を一つ追加している。 末尾再帰に書き直す場合は、計算結果を保持する引数を用意し、そこに副作用の役割を担わせることも多い。 これは「変化するmutableな変数」を表している。(引数で副作用(再代入)を引き回すスタイル)&lt;/p&gt;&lt;p&gt;以下のコードでは&lt;code&gt;fact2&amp;#40;10, 1&amp;#41;&lt;/code&gt;の計算しか行っていないが、例えば、&lt;code&gt;fact1&amp;#40;10000&amp;#41;&lt;/code&gt;と&lt;code&gt;fact2&amp;#40;10000, 1&amp;#41;&lt;/code&gt;では、 fact1の場合、StackOverFlowになってしまうが、fact2ではコンパイラの最適化(末尾再帰最適化)によりStackOverFlowにならない。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; fact2&amp;#40;10, 1&amp;#41;
res39: Int = 3628800
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;末尾再帰では基本的に綺麗なプログラムを書こうと考えない事がポイント(末尾再帰の時点で大して綺麗に書けてない)。&lt;ul&gt;&lt;li&gt;whileループを無理矢理、再帰に書き換えるような勢いが大切。&lt;/li&gt;&lt;li&gt;内容によっては既に末尾再帰形式の関数になっているような関数もある。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Scalaでは相互再帰は末尾最適化をしない。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;例えば以下のようなプログラム、&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;def odd&amp;#40;n: Int&amp;#41;: Boolean = if &amp;#40;n = 1&amp;#41; {
  true
} else {
  even&amp;#40;n - 1&amp;#41;
}

def even&amp;#40;n: Int&amp;#41;: Boolean = if &amp;#40;n = 0&amp;#41; {
  true
} else {
  odd&amp;#40;n - 1&amp;#41;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;は、oddとevenを相互に呼び出し、自分自身の末尾で関数を呼び出す。 この形式はfact2と同様に、末尾に関数呼び出し以外の処理は残っていないが、末尾最適化されない。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;相互再帰や複雑な再帰呼出しは、Trampolineという末尾最適化と同様のスタックを消費しない書き方がある。&lt;ul&gt;&lt;li&gt;&lt;a href='http://halcat.org/scala/stackless/index.html'&gt;スタックレスScala&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;原理主義的に再帰のみでゴリゴリimmutableなコードも書けるが、&lt;ul&gt;&lt;li&gt;そもそもScalaなら可能な限りコレクションを使ってループを書くべき。&lt;/li&gt;&lt;li&gt;可読性や後でメンテナンスすることを考えるなら、Scalaの場合はwhile文やfor文が現実的な選択肢かも知れない。&lt;ul&gt;&lt;li&gt;関数を呼び出す側から見た時に、参照透過な関数になっていればOKという考え方もアリとみなす。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;結論としては、関数型プログラミングでのループは再帰やfor/whileのような構文ではなく、  mapやfilterといったコレクション関数を使うのが一般的。&lt;ul&gt;&lt;li&gt;大半のループはコレクション関数(のメソッドチェーン)で記述した方が、可読性が高く、メンテナンスもしやすい簡潔なコードが書ける。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;無名関数(ラムダ抽象)&quot;&gt;無名関数(ラムダ抽象)&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; val f = &amp;#40;&amp;#40;a: Int&amp;#41; =&amp;gt; a + 1&amp;#41;
f: Int =&amp;gt; Int = $$Lambda$4017/598382925@72f0dff7

scala&amp;gt; f&amp;#40;1&amp;#41;
res19: Int = 2

scala&amp;gt; f&amp;#40;2&amp;#41;
res20: Int = 3
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;おなじみの無名関数。大体、無名関数かラムダ式でググったら出てくる。ラムダ式とはあんまり言わない(方がいい)(※個人の意見です)。&lt;/li&gt;&lt;li&gt;第一級オブジェクトとしての関数(データとして扱う事が出来る関数): 関数を渡す、値として保持できる。&lt;/li&gt;&lt;li&gt;無名関数の式が評価されると、&lt;strong&gt;関数オブジェクト&lt;/strong&gt;が生成される。&lt;ul&gt;&lt;li&gt;関数オブジェクトは、コンストラクタによって生成される他のJavaオブジェクトと同様に扱えるオブジェクト    (型となるクラスを持ち、インスタンスとして扱われるように)なる。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;オブジェクトなのでデータを持たせる事もできる。(後述のクロージャを参照)&lt;/li&gt;&lt;li&gt;C言語の関数のポインタと何が違うのか? / JavaのStrategyパターンと何が違うのか。&lt;ul&gt;&lt;li&gt;関数のポインタと違い、データ(値)を保持する。&lt;/li&gt;&lt;li&gt;JavaのStrategyパターンと違い、インターフェースを必要としない。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;map/filter/reduce(fold)関数や、その他様々な高階関数に渡す時によく使用する。(後述の高階関数を参照)&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;レキシカルスコープ(lexical&amp;#95;scope,&amp;#95;静的スコープ)&quot;&gt;レキシカルスコープ(Lexical scope, 静的スコープ)&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&quot;Scope&quot;とは範囲のこと。&quot;Lexical&quot;とはLiterallyくらいの意味で深い意味はない。&lt;/li&gt;&lt;li&gt;レキシカルスコープとは、静的に、ある変数を参照した時、どのタイミングで代入された値が参照されるかが決まるスコープのこと。&lt;/li&gt;&lt;li&gt;Scalaの変数(valや引数)の有効範囲は、レキシカルスコーピングによって決定される。&lt;/li&gt;&lt;li&gt;変数の値を取り出す時、(Scalaの)レキシカルスコープでは、ネストした変数定義において最も内側で定義された変数を参照する。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;以下の2つのコード。&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; {val a = 1; &amp;#40;&amp;#40;a:Int&amp;#41; =&amp;gt; &amp;#40;&amp;#40;a:Int&amp;#41; =&amp;gt; a&amp;#41;&amp;#40;3&amp;#41;&amp;#41;&amp;#40;2&amp;#41; }
res5: Int = 3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;または、&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; {val a = 1; {val a = 2; {val a = 3; a} } }
res11: Int = 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;この時、aは、最も内側にあるaは、ネストしている中で最も手前で定義された変数(引数)aの値を参照する。 次の例では、最も内側のスコープを抜けているので上記とは別の値を見に行く。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; {val a = 1; &amp;#40;&amp;#40;a:Int&amp;#41; =&amp;gt; {&amp;#40;&amp;#40;a:Int&amp;#41; =&amp;gt; a&amp;#41;&amp;#40;3&amp;#41;; a}&amp;#41;&amp;#40;2&amp;#41; }
res10: Int = 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;または、&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; {val a = 1; {val a = 2; {val a = 3;} a} }
res14: Int = 2
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;レキシカルスコープ自体は、モダンな言語では一般的な仕組み。&lt;ul&gt;&lt;li&gt;Scalaだけでなく、JavaScriptやTypeScript(たぶん)、Ruby(たぶん)、Python、Groovy(たぶん)でも共通。&lt;ul&gt;&lt;li&gt;但し、JavaScriptのvarはFunctionスコープと呼ばれるスコープ(レキシカルスコープとは若干違う)なので注意が必要。      (文法によってスコープのとり方が異なる)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;今とはなっては、(静的スコープではない)動的スコープを持つ言語の方が珍しい。動的スコープを採用している言語はほとんどない。&lt;ul&gt;&lt;li&gt;現代で実用的な動的スコープがメインの言語はEmacs Lispくらい。。。&lt;/li&gt;&lt;li&gt;但し、implicit parameterは動的スコープ的な役割に近い。      implicit parameterは、社内だとFutureのExecutionContextがよく使われる。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;クロージャ(closure)&quot;&gt;クロージャ(Closure)&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;自由変数を含む(使用した)関数によって生成された関数オブジェクトの事をクロージャ(Closure)という。&lt;ul&gt;&lt;li&gt;自由変数: 関数定義中にその関数のブロック内で定義されていない変数のこと。&lt;/li&gt;&lt;li&gt;クロージャは、自由変数に束縛された値(の参照)をデータとして保持する。&lt;/li&gt;&lt;li&gt;ブロックから抜けだした関数オブジェクトは、レキシカルスコーピングによって保持した変数の参照を保持し続ける。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;プログラミング言語のClojureの事ではない。&lt;/li&gt;&lt;li&gt;レキシカルスコープ同様、モダンな言語では一般的なしくみ。関数定義や無名関数からクロージャを生成できる。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;以下では、関数オブジェクトがaseqという変数名が保持しているSeqの参照を持つ。&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; val hSeq = {val aseq = Seq&amp;#40;1, 2, 3, 4, 5&amp;#41;; &amp;#40;&amp;#40;i: Int&amp;#41; =&amp;gt; aseq&amp;#40;i&amp;#41;&amp;#41; }
hSeq: Int =&amp;gt; Int = $$Lambda$4005/1227571506@23364fcf

scala&amp;gt; hSeq&amp;#40;1&amp;#41;
res8: Int = 2

scala&amp;gt; hSeq&amp;#40;2&amp;#41;
res9: Int = 3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;一番外側で定義された変数hSeqは、ブロック内部で生成された関数オブジェクト(クロージャ)を束縛している。 この関数オブジェクトに引数を与える事で、aseqに束縛されたSeqの値にアクセスできる。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;上記のような書き方により、JavaやScalaで指定するprivateよりも更に細かいスコープ(変数の有効範囲)の制御が可能になる。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;クロージャの使い方いろいろ&quot;&gt;クロージャの使い方いろいろ&lt;/h3&gt;&lt;p&gt;次のように2つの関数からのみ参照可能なHashmapを定義できる。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; val &amp;#40;f, g&amp;#41; = { val hmap = Map&amp;#40;&amp;quot;ab&amp;quot;-&amp;gt; 1, &amp;quot;ac&amp;quot; -&amp;gt; 2&amp;#41;;
     | &amp;#40;&amp;#40;&amp;#40;s: String&amp;#41; =&amp;gt; hmap&amp;#40;s&amp;#41;&amp;#41;, &amp;#40;&amp;#40;s: String&amp;#41; =&amp;gt; hmap&amp;#40;&amp;quot;a&amp;quot;++s&amp;#41;&amp;#41;&amp;#41; }
f: String =&amp;gt; Int = $$Lambda$4011/179665104@2da7b9bf
g: String =&amp;gt; Int = $$Lambda$4012/49123780@295afa48

scala&amp;gt; f&amp;#40;&amp;quot;b&amp;quot;&amp;#41;
java.util.NoSuchElementException: key not found: b
  at scala.collection.immutable.Map$Map2.apply&amp;#40;Map.scala:129&amp;#41;
  at .$anonfun$x$1$1&amp;#40;&amp;lt;console&amp;gt;:12&amp;#41;
  at .$anonfun$x$1$1$adapted&amp;#40;&amp;lt;console&amp;gt;:12&amp;#41;
  ... 36 elided

scala&amp;gt; g&amp;#40;&amp;quot;b&amp;quot;&amp;#41;
res17: Int = 1

scala&amp;gt; f&amp;#40;&amp;quot;ac&amp;quot;&amp;#41;
res18: Int = 2
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;勿論、ListやHashmapだけでなく、関数を保持する関数を作ったり、関数を保持する関数を保持する関数など色々作れる。&lt;/li&gt;&lt;li&gt;ただし、関数オブジェクトを濫用し続けると、不用意に意図しないクロージャを生成してしまう事も考えられる。  このような場合、GCによって回収されない参照をいつまでも保持し続けることになってしまう。  (とは言え、普通に書いている限りだとこのようなバグは殆ど無いかも知れない)&lt;/li&gt;&lt;li&gt;クロージャにより変数はそのスコープの外を出ても有効である場合がある。  つまり、ローカル変数は、変数を定義した関数本体が終了しても生き残る。&lt;ul&gt;&lt;li&gt;変数が生存している(有効である)期間のことを&lt;strong&gt;エクステント(extent)&lt;/strong&gt;という。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;クロージャとは逆に、関数内に自由変数を含まないような関数のことを&lt;strong&gt;コンビネータ(combinator)&lt;/strong&gt;という。  ただし、Scalaだと、パーサコンビネータ以外ではコンビネータという言い方はあまりされない(みたい)。&lt;/li&gt;&lt;li&gt;クロージャを使うことで計算を遅延(将来に実行)させられる。典型的な使用例がFutureによるコールバック。&lt;ul&gt;&lt;li&gt;遅延させたい計算は常に無名関数のシンタックスで囲うことで遅延させる事が出来る。&lt;code&gt;dao.findById&amp;#40;id&amp;#41;&lt;/code&gt;がFutureを返す時、mapに渡された&lt;code&gt;row =&amp;gt;&lt;/code&gt;以降は、Futureの結果が返ってくるまで実行されない。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;dao.findById&amp;#40;id&amp;#41;.map { row =&amp;gt; row.name }
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;クロージャでif関数っぽいものを作る&quot;&gt;クロージャでif関数っぽいものを作る&lt;/h3&gt;&lt;p&gt;クロージャとは直接関係ないが、無名関数の性質を応用することで&lt;strong&gt;if関数&lt;/strong&gt;のようなものも作ることが出来る。 つまり関数呼び出し時に引数が実行されない形の書き方ができる。&lt;/p&gt;&lt;p&gt;(※しかし、Scalaだとここまでしなくてもcall-by-nameで書ける)&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; def ifFunction&amp;#40;b: Boolean, f: &amp;#40;&amp;#41; =&amp;gt; Unit, g: &amp;#40;&amp;#41; =&amp;gt; Unit&amp;#41; = if &amp;#40;b&amp;#41; f&amp;#40;&amp;#41; else g&amp;#40;&amp;#41;
ifFunction: &amp;#40;b: Boolean, f: &amp;#40;&amp;#41; =&amp;gt; Unit, g: &amp;#40;&amp;#41; =&amp;gt; Unit&amp;#41;Unit

scala&amp;gt; ifFunction&amp;#40;true, { &amp;#40;&amp;#41; =&amp;gt; println&amp;#40;&amp;quot;a&amp;quot;&amp;#41;; }, { &amp;#40;&amp;#41; =&amp;gt; println&amp;#40;&amp;quot;b&amp;quot;&amp;#41;; }&amp;#41;
a

scala&amp;gt; ifFunction&amp;#40;false, { &amp;#40;&amp;#41; =&amp;gt; println&amp;#40;&amp;quot;a&amp;quot;&amp;#41;; }, { &amp;#40;&amp;#41; =&amp;gt; println&amp;#40;&amp;quot;b&amp;quot;&amp;#41;; }&amp;#41;
b
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;無名関数で囲わない書き方の場合、次のようになる。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; def ifFunction&amp;#40;b: Boolean, f: Unit, g: Unit&amp;#41; = if &amp;#40;b&amp;#41; f else g
ifFunction: &amp;#40;b: Boolean, f: Unit, g: Unit&amp;#41;Unit

scala&amp;gt; ifFunction&amp;#40;false, { println&amp;#40;&amp;quot;a&amp;quot;&amp;#41;; }, { println&amp;#40;&amp;quot;b&amp;quot;&amp;#41;; }&amp;#41;
a
b
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;関数呼び出しは、引数を評価した後、その結果が関数に渡されて関数自体が実行される。 そのため、通常の呼び出しだと、引数が評価されてしまうが、引数を関数化することで、 引数の評価を遅延させる(実質的には実行させない)事ができる。&lt;/p&gt;&lt;h3 id=&quot;クロージャで作るリスト&quot;&gt;クロージャで作るリスト&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;クロージャのみでリスト構造(データ構造)を作ることが可能。&lt;ul&gt;&lt;li&gt;ルール: データ構造やクラスは使わない。&lt;/li&gt;&lt;li&gt;関数型プログラミングにおける大道芸の一つ。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;単方向連結リスト(いわゆるLinkedList)の実装。&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; val cons = &amp;#40;x: Int, xs: Int =&amp;gt; Any&amp;#41; =&amp;gt; &amp;#40;&amp;#40;i: Int&amp;#41; =&amp;gt; if &amp;#40;i == 0&amp;#41; x else xs&amp;#40;i - 1&amp;#41;&amp;#41;
cons: &amp;#40;Int, Int =&amp;gt; Any&amp;#41; =&amp;gt; Int =&amp;gt; Any = $$Lambda$3648/212142471@1c3cc65d

scala&amp;gt; val emptyF = &amp;#40;x: Int&amp;#41; =&amp;gt; null
emptyF: Int =&amp;gt; Int = $$Lambda$3649/558084802@db6ad80

scala&amp;gt; val ls = cons&amp;#40;4, cons&amp;#40;3, cons&amp;#40;2, emptyF&amp;#41;&amp;#41;&amp;#41;
ls: Int =&amp;gt; Any = $$Lambda$3650/2033873015@4f08ca31

scala&amp;gt; ls&amp;#40;1&amp;#41;
res57: Any = 3

scala&amp;gt; ls&amp;#40;3&amp;#41;
res58: Any = null

scala&amp;gt; ls&amp;#40;2&amp;#41;
res59: Any = 2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;関数がAny型を返す、リストの上限を超えた時nullを返すのは、簡単のため。 consでリストを構築する。空リストはemptyFで表現する。&lt;/p&gt;&lt;h2 id=&quot;高階関数(high-order&amp;#95;function)&quot;&gt;高階関数(High-order function)&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;関数オブジェクトは値として他の関数に渡したり、関数を受け取る、変数に束縛するなど、Javaオブジェクトのような扱いが可能。&lt;/li&gt;&lt;li&gt;関数を引数としたり、戻り値として使用する関数の事を高階関数という。&lt;ul&gt;&lt;li&gt;関数に関数を渡す時は、無名関数として渡す(mapなど)こともできるし、定義された名前付きの関数を渡すこともできる。&lt;ul&gt;&lt;li&gt;特に、無名関数を渡すパターンは、コレクション関数を使用する時によく使う。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;無名関数を他の関数に渡す。&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; Seq&amp;#40;1, 2, 3&amp;#41;.map&amp;#40;i =&amp;gt; i + 2&amp;#41;
res0: Seq&amp;#91;Int&amp;#93; = List&amp;#40;3, 4, 5&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;定義済みの他の関数に渡す。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; def add2&amp;#40;i: Int&amp;#41;: Int = i + 2
add2: &amp;#40;i: Int&amp;#41;Int

scala&amp;gt; Seq&amp;#40;1, 2, 3&amp;#41;.map&amp;#40;add2&amp;#41;
res4: Seq&amp;#91;Int&amp;#93; = List&amp;#40;3, 4, 5&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;高階関数を使用することで、ほぼ無制限にプログラム中の任意のロジック(具体的なコード)を抽象化できる。&lt;ul&gt;&lt;li&gt;ちなみに、データ型や関数の定義などは抽象化できない。。。&lt;/li&gt;&lt;li&gt;抽象化したい部分を関数化し、差分のみをそれぞれ別関数にして、抽象化した関数に差分の関数を渡すという方法。&lt;/li&gt;&lt;li&gt;コード全体の至る所で使用できて、DRYに書けるというメリットはあるが。    やり過ぎると原型を留めなくなるので注意が必要。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;部分適用/カリー化(Partial application / Curring)&lt;ul&gt;&lt;li&gt;複数の引数を取る関数を一つの引数のみを取る関数に書き換えることをカリー化という。&lt;/li&gt;&lt;li&gt;途中まで値を代入して、途中からの値を別の高階関数の中で代入させたい時などに使用する。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;以下がカリー化の例。上はカリー化されていない関数。下が上の関数をカリー化した関数。&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; def sum&amp;#40;a: Int, b: Int, c: Int&amp;#41;: Int = a + b + c
sum: &amp;#40;a: Int, b: Int, c: Int&amp;#41;Int

scala&amp;gt; def sum&amp;#40;a: Int&amp;#41;&amp;#40;b: Int&amp;#41;&amp;#40;c: Int&amp;#41;: Int = a + b + c
sum: &amp;#40;a: Int&amp;#41;&amp;#40;b: Int&amp;#41;&amp;#40;c: Int&amp;#41;Int
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;次のようにして、途中までの値を入れておく。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; sum&amp;#40;1&amp;#41;&amp;#40;2&amp;#41; &amp;#95;
res1: Int =&amp;gt; Int = $$Lambda$3054/194743804@57e5ed15
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;そして、次のように使うことができる。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; Seq&amp;#40;1, 2, 3&amp;#41;.map&amp;#40;sum&amp;#40;1&amp;#41;&amp;#40;2&amp;#41;&amp;#41;
res3: Seq&amp;#91;Int&amp;#93; = List&amp;#40;4, 5, 6&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;途中まで引数の値を適用し別の無名関数を生成する書き方を部分適用という。&lt;ul&gt;&lt;li&gt;部分適用とカリー化は間違えやすいことで有名。&lt;ul&gt;&lt;li&gt;&lt;a href='http://kmizu.hatenablog.com/entry/20091216/1260969166'&gt;カリー化 != 部分適用&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;関数合成&quot;&gt;関数合成&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;2つの関数を合成する。数学の合成関数と考え方は同じ。: f(g(x)) = (f . g)(x)&lt;/li&gt;&lt;li&gt;合成関数用の関数として、compose/andThenが用意されている。&lt;/li&gt;&lt;li&gt;ちなみに、Scalaだとcompose使いたいケースでは、メソッドチェーンで書く事が多いのであんまり使わない。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;次の場合、&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;def withComma&amp;#40;ls: Seq&amp;#91;String&amp;#93;&amp;#41; = ls.mkString&amp;#40;&amp;quot;,&amp;quot;&amp;#41;
def trimString&amp;#40;ls: Seq&amp;#91;String&amp;#93;&amp;#41; = ls.map&amp;#40;&amp;#95;.trim.toInt&amp;#41;
def multiply20&amp;#40;ls: Seq&amp;#91;Int&amp;#93;&amp;#41; = ls.map &amp;#40;&amp;#95; &amp;#42; 20&amp;#41;.map&amp;#40;&amp;#95;.toString&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;StingのSeqの要素を20倍してカンマ区切りの文字列にしたい。。。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;val ls = Seq&amp;#40;&amp;quot; 20&amp;quot;, &amp;quot; 30 &amp;quot;, &amp;quot;40 &amp;quot;, &amp;quot;50&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;しかもなんか変な空白入ってる。。。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; withComma&amp;#40;multiply20&amp;#40;trimString&amp;#40;ls&amp;#41;&amp;#41;&amp;#41;
res31: String = 400,600,800,1000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;括弧が多い。。。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; &amp;#40;withComma compose multiply20 compose trimString&amp;#41;&amp;#40;ls&amp;#41;
res32: String = 400,600,800,1000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;さらにこれを関数化したい。。。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; val multiply20c = withComma compose multiply20 compose trimString
multiply20c: Seq&amp;#91;String&amp;#93; =&amp;gt; String = scala.Function1$$Lambda$605/1525241607@1f18de49

scala&amp;gt; multiply20c&amp;#40;ls&amp;#41;
res33: String = 400,600,800,1000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;引数を定義して関数化すると、変数が増えて冗長になるので、関数を合成の場合は、&lt;code&gt;compose&lt;/code&gt;のみで組み合わせを表現し関数を定義できる。 composeだとわかりにくい? そんな時の為にandThenという関数が用意されている。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;composeとandThenは順序が逆。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;composeの場合&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; &amp;#40;&amp;#40;&amp;#40;s:String&amp;#41; =&amp;gt; s.toInt&amp;#41; compose &amp;#40;&amp;#40;x:Int&amp;#41;=&amp;gt; x.toString&amp;#41;&amp;#41;&amp;#40;20&amp;#41;
res24: Int = 20
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;andThenの場合&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; &amp;#40;&amp;#40;&amp;#40;x:Int&amp;#41;=&amp;gt; x.toString&amp;#41; andThen &amp;#40;&amp;#40;s:String&amp;#41; =&amp;gt; s.toInt&amp;#41;&amp;#41;&amp;#40;20&amp;#41;
res22: Int = 20
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;andThenを使って前述のコードを書き直す。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; val multiply20c = trimString andThen multiply20 andThen withComma
multiply20c: Seq&amp;#91;String&amp;#93; =&amp;gt; String = scala.Function1$$Lambda$4021/295193997@7d9759a

scala&amp;gt; multiply20c&amp;#40;ls&amp;#41;
res34: String = 400,600,800,1000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;処理の順番が明確になり、分かりやすくなった。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;ライブラリやフレームワークなどのコードで時々登場する。&lt;ul&gt;&lt;li&gt;使いすぎると分かりづらくなる事も多いが、Scalazだと頻繁に使われていたりする。&lt;/li&gt;&lt;li&gt;Playframeworkのアクション合成(action composition)などでも類似の概念が登場する。&lt;/li&gt;&lt;li&gt;ただし、Scalaの場合、メソッドチェーンで書くほうが一般的なようなので、そこまで使わないかも知れない。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;上記のような変数の登場しない合成による関数定義の仕方を&lt;strong&gt;ポイントフリースタイル(point-free style)&lt;/strong&gt;という。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;部分関数(partial&amp;#95;function)&quot;&gt;部分関数(Partial function)&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;ある特定の引数に対してのみ値を返す関数。&lt;/li&gt;&lt;li&gt;&lt;a href='http://yuroyoro.hatenablog.com/entry/20100705/1278328898'&gt;ScalaのPartialFunctionが便利ですよ&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Scalaでも他の関数型言語と同じように、関数を使ったプログラミングができることがわかる。  Javaよりは簡単かつ柔軟な書き方を実現するしくみが用意されている。&lt;/li&gt;&lt;li&gt;Scalaだとメソッドチェーンによる書き方が多いので、ポイントフリースタイルや合成関数はあまり使わなさそう。&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Sat, 14 Apr 2018 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
https://yuwki0131.github.io/posts-output/2018-04-14-scala-algebraic-data-types/
</guid>
<link>
https://yuwki0131.github.io/posts-output/2018-04-14-scala-algebraic-data-types/
</link>
<title>
Scalaでの代数的データ型のしくみと使い方
</title>
<description>
&lt;p&gt;Scalaについて勉強した時のメモ(その2)です。代数的データ型の扱い方について。&lt;/p&gt;&lt;p&gt;※ 元々はmarkdownで書いていたテキストの転載。&lt;/p&gt;&lt;h2 id=&quot;代数的データ型(algebraic&amp;#95;data&amp;#95;type)&quot;&gt;代数的データ型(Algebraic data type)&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;端的に言うと、以下のようなデータ定義の仕方。&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;sealed trait Alphabet
case object Alpha extends Alphabet
case class Beta&amp;#40;name: String&amp;#41; extends Alphabet
case class Gamma&amp;#40;name: String, n: Int&amp;#41; extends Alphabet
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;引数の戻り値型や処理結果のパターンや、Seq型で表現できないようなリスト構造、木構造、  その他必要に応じてポリモーフィックに変化するデータ型を表す際に使用する。&lt;/li&gt;&lt;li&gt;ざっくり説明すると、代数的データ型とは、直積型による構造体と、コンストラクタと直和型によるポリモーフィズムを表した型。&lt;ul&gt;&lt;li&gt;Scala風に言うと、複数のcase objectとcase classを単一のtraitでまとめたもの。&lt;/li&gt;&lt;li&gt;全てを使う必要はない。必要に応じて必要なオブジェクトを使う。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;代数的データ型は、コンストラクタと、直積型、直和型から構成される。&lt;ul&gt;&lt;li&gt;代数的(&quot;Algebraic&quot;)という単語は、直和型と直積型に由来している。    &lt;a href='https://wiki.haskell.org/Algebraic_data_type'&gt;Algebraic data type - HaskellWiki&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;代数的データ型を返す関数の型は継承元のtraitで、条件に応じて、様々なtraitの型のインスタンスを返す。&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;def func&amp;#40;n: Int&amp;#41;: Alphabet =
  if &amp;#40;n &amp;lt; 10&amp;#41; Alpha
  else if &amp;#40;n &amp;lt; 30&amp;#41; Beta&amp;#40;&amp;quot;aaa&amp;quot;&amp;#41;
  else Gamma&amp;#40;&amp;quot;bbb&amp;quot;, n&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;以下のようにパターンマッチで各データパターンごとに分解できる。&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;xxx.func&amp;#40;x&amp;#41; match {
  case Alpha =&amp;gt; 〜 ...
  case Beta&amp;#40;name&amp;#41; =&amp;gt; 〜 &amp;#40;この中では変数nameが使える&amp;#41; ...
  case Gamma&amp;#40;name, n&amp;#41; =&amp;gt; 〜 ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;普段よく使っている代数的データ型の一つがOption型&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/scala/scala/blob/2.13.x/src/library/scala/Option.scala'&gt;scala/src/library/scala/Option.scala&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;sealed abstract class Option&amp;#91;+A&amp;#93; extends Product with Serializable
case object None extends Option&amp;#91;Nothing&amp;#93;
final case class Some&amp;#91;+A&amp;#93;&amp;#40;value: A&amp;#41; extends Option&amp;#91;A&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;割と他の関数型言語だと定番の書き方。&lt;ul&gt;&lt;li&gt;参考: &lt;a href='https://qiita.com/xmeta/items/91dfb24fa87c3a9f5993'&gt;代数的データ型とパターンマッチによる言語比較&lt;/a&gt;&lt;/li&gt;&lt;li&gt;(余談)代数的データ型を一般化したGADT(Generalized Algebraic Data Type)というのもある。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;関数型プログラミングだと実装とデータ型を分離する傾向がある。(要出典)&lt;ul&gt;&lt;li&gt;分離されたデータ型が代数的データ型。&lt;/li&gt;&lt;li&gt;データ型(クラス)に実装が付随しているオブジェクト指向とは異なる。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;代数的データ型は、再帰的(帰納的)に定義される有限のデータ構造(Streamなど無限のデータ構造というのもある)&lt;ul&gt;&lt;li&gt;参照: &lt;a href='http://docs.scala-lang.org/ja/overviews/collections/concrete-immutable-collection-classes.html'&gt;具象不変コレクションクラス | Scala Documentation&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;(余談)一応、case classには、&lt;code&gt;final&lt;/code&gt;を付けた方がいい: &lt;a href='https://stackoverflow.com/questions/34561614/should-i-use-the-final-modifier-when-declaring-case-classes'&gt;Should I use the final modifier when declaring case classes? - StackOverFlow&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;パターンマッチ&quot;&gt;パターンマッチ&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://qiita.com/techno-tanoC/items/3dd3ed63d161c53f2d89'&gt;Scalaのパターンマッチ - Qiita&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Scalaでは、リテラル(定数)、正規表現、構造(タプル、case objectやcase classなど)、代数的データ型に関するマッチなどが可能。&lt;/li&gt;&lt;li&gt;データ型のインスタンス(ListやTuple、Case classなど)を構造的に分解して変数に代入できる。&lt;ul&gt;&lt;li&gt;オブジェクトにunapplyが定義されていれば、パターンマッチが可能。&lt;/li&gt;&lt;li&gt;&lt;a href='http://yuroyoro.hatenablog.com/entry/20100709/1278657400'&gt;パターンマッチをもっと便利に-extractor(抽出子)による拡張&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;if-else式とは違い、データ型に対する網羅的にパターンマッチを行う。網羅的でない場合は警告がでる。(但し、エラーにはならない。)  &lt;strong&gt;パターン漏れが防げるので積極的に活用していきたい。&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;データ型に対する分岐か、それ以外かでif-elseとの使い分けができる。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;listに対するパターンマッチ&quot;&gt;Listに対するパターンマッチ&lt;/h3&gt;&lt;p&gt;次のコードはパターンマッチで書き換えた方が、ロジックがシンプルになる。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;if &amp;#40;ls.isEmpty&amp;#41; 1 else ls.head
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;は、リスト&lt;code&gt;ls&lt;/code&gt;についてのパターンマッチ、&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;ls match {
  case Nil =&amp;gt; 1
  case x::xs =&amp;gt; x
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;と書き直せる。else節でls.headを使う時に、lsを手前の条件節でチェックしているかどうかを考慮する必要が無くなる。&lt;/p&gt;&lt;p&gt;ただし上記の場合は、headOptionとgetOrElseで書くのが一般的のよう。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;ls.headOption.getOrElse&amp;#40;1&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;optionに対するパターンマッチ&quot;&gt;Optionに対するパターンマッチ&lt;/h3&gt;&lt;p&gt;次のようなケースも、リスト同様に書き直せる。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;if &amp;#40;x.isEmpty&amp;#41; &amp;quot;hogehoge&amp;quot; else x.get.toString
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;存在するSome/Noneパターンを列挙する。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;x match {
  case Some&amp;#40;x&amp;#41; =&amp;gt; x.toString
  case None =&amp;gt; &amp;quot;hogehoge&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Either(Right/Left)やTry(Success/Failure)の場合も同様にして、分解できる。&lt;/p&gt;&lt;h3 id=&quot;代数的データ型に対するパターンマッチ&quot;&gt;代数的データ型に対するパターンマッチ&lt;/h3&gt;&lt;p&gt;以下のような代数的データ型に対するパターンマッチ。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;sealed trait Alphabet
case object Alpha extends Alphabet
case class Beta&amp;#40;name: String&amp;#41; extends Alphabet
case class Gamma&amp;#40;name: String, n: Int&amp;#41; extends Alphabet
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;次のように書く。書き方はOption等と同じ。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;x match {
  case Alpha =&amp;gt; &amp;quot;A&amp;quot;
  case Beta&amp;#40;name&amp;#41; =&amp;gt; &amp;quot;B&amp;#40;&amp;quot; + name + &amp;quot;&amp;#41;&amp;quot;
  case Gamma&amp;#40;name, n&amp;#41; =&amp;gt; &amp;quot;C&amp;#40;&amp;quot; + name + &amp;quot;&amp;#41;&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;パターンマッチに条件を追加&quot;&gt;パターンマッチに条件を追加&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;パターンマッチの場合、構造のチェックと同時に、データ型から値の取り出し、変数への束縛まで行う。&lt;/li&gt;&lt;li&gt;ただし、以下のような書き方をした場合、パターンマッチの本来の意味はなくなる(ただのif-else式と基本的に同じ意味しかなくなる)。&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;x match {
 case &amp;#95; if x.isEmpty =&amp;gt; &amp;quot;hogehoge&amp;quot;
 case &amp;#95; =&amp;gt; x.get.toString
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;パターンマッチでのifによる条件追加は以下のようなケースだと有効。  パターンマッチの基本的な機能である構造的な変数の束縛、パターンの列挙(とそのチェック)の両方を使用しているため。&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;x match {
 case Some&amp;#40;x&amp;#41; if x == &amp;quot;a&amp;quot; =&amp;gt; &amp;quot;hogehoge&amp;quot;
 case Some&amp;#40;x&amp;#41; =&amp;gt; &amp;quot;fugafuga&amp;quot;
 case None =&amp;gt; &amp;quot;piyopiyo&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;1caseに複数パターンのマッチも可能。&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;n match {
  case 1 | 2 | 3 =&amp;gt; &amp;quot;hogehoge&amp;quot;
  case &amp;#95; =&amp;gt; &amp;quot;hoge&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;代数的データ型とパターンマッチ&quot;&gt;代数的データ型とパターンマッチ&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Javaのポリモーフィズムでは、処理が各クラスごと分散してしまうというデメリットがある。&lt;/li&gt;&lt;li&gt;代数的データ型とパターンマッチでは、データ型はデータ型ごとに定義し、ポリモーフィックな処理はパターンマッチで一箇所に記述させる。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href='https://ja.wikipedia.org/wiki/Composite_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3'&gt;Compositeパターン - Wikipedia&lt;/a&gt; から引用してきた例(長かったのでコードの一部を改変している)。&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;interface FileInterface {
	public void ls&amp;#40;int depth&amp;#41;;
	public boolean add&amp;#40;FileInterface c&amp;#41;;
}
class File implements FileInterface {
	private String name;
	public File&amp;#40;String name&amp;#41; { this.name = name; }
	public void ls&amp;#40;int depth&amp;#41; {
		System.out.println&amp;#40;&amp;quot;depth&amp;#40;&amp;quot; + depth + &amp;quot;&amp;#41; file:&amp;quot; + this.name&amp;#41;;
	}
	public boolean add&amp;#40;FileInterface c&amp;#41; { return false; }
}
class Folder implements FileInterface {
	private String name;
	private List&amp;lt;FileInterface&amp;gt; fileList = new ArrayList&amp;lt;FileInterface&amp;gt;&amp;#40;&amp;#41;;
	public Folder&amp;#40;String name&amp;#41; { this.name = name; }
	public void ls&amp;#40;int depth&amp;#41; {
		System.out.println&amp;#40;&amp;quot;depth&amp;#40;&amp;quot; + depth + &amp;quot;&amp;#41; folder:&amp;quot; + name&amp;#41;;
		for &amp;#40;FileInterface file : fileList&amp;#41; { file.ls&amp;#40;depth + 1&amp;#41;; }
	}
	public boolean add&amp;#40;FileInterface c&amp;#41; { return this.fileList.add&amp;#40;c&amp;#41;; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;上記は代数的データ型とパターンマッチで書き直せる。 代数的データ型は以下のように定義できる。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;sealed trait FileInterface
case class File&amp;#40;name: String&amp;#41; extends FileInterface
case class Folder&amp;#40;name: String, f: scala.collection.mutable.ListBuffer&amp;#91;FileInterface&amp;#93;&amp;#41; extends FileInterface
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;次のようにデータを作る。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; val prj = Folder&amp;#40;&amp;quot;crud-prj&amp;quot;, ListBuffer&amp;#40;File&amp;#40;&amp;quot;README.md&amp;quot;&amp;#41;, File&amp;#40;&amp;quot;build.sbt&amp;quot;&amp;#41;, Folder&amp;#40;&amp;quot;src&amp;quot;, ListBuffer&amp;#40;File&amp;#40;&amp;quot;Helloworld.scala&amp;quot;&amp;#41;, File&amp;#40;&amp;quot;XXXDao.scala&amp;quot;&amp;#41;, File&amp;#40;&amp;quot;ExampleController.scala&amp;quot;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ディレクトリ階層を表示する関数。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;def ls&amp;#40;files: FileInterface, depth: Int&amp;#41;: Unit = files match {
  case File&amp;#40;name&amp;#41; =&amp;gt; println&amp;#40;&amp;quot;depth&amp;#40;&amp;quot; + depth + &amp;quot;&amp;#41; file:&amp;quot; + name&amp;#41;
  case Folder&amp;#40;name, children&amp;#41; =&amp;gt; {
    println&amp;#40;&amp;quot;depth&amp;#40;&amp;quot; + depth + &amp;quot;&amp;#41; folder:&amp;quot; + name&amp;#41;
    children.foreach{ child =&amp;gt; ls&amp;#40;child, depth + 1&amp;#41; }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ディレクトリに要素を追加する関数。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;def add&amp;#40;files: FileInterface, element: FileInterface&amp;#41;: Boolean = files match {
  case File&amp;#40;name&amp;#41; =&amp;gt; false
  case Folder&amp;#40;name, children&amp;#41; =&amp;gt; { children += element; true }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Javaと同様の関数を書くならば、上記の書き方で問題ない。ところで、上記の関数は木構造をmutableに変更してしまう。 一般に関数型プログラミングは副作用(データの破壊的な変更)を回避するため、その点において、上記の書き方は問題がある。 そこで、immutableなadd関数を容易する必要がある。 immutableな関数を容易し、rootから書き換える。例えば、次のような関数が考えられる。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;def addI&amp;#40;files: FileInterface, elem: FileInterface, path: Seq&amp;#91;String&amp;#93;&amp;#41;: FileInterface = &amp;#40;files, path&amp;#41; match {
  case &amp;#40;Folder&amp;#40;name, children&amp;#41;, Nil&amp;#41; =&amp;gt;
    Folder&amp;#40;name, children :+ elem&amp;#41;
  case &amp;#40;Folder&amp;#40;name, children&amp;#41;, x::xs&amp;#41; =&amp;gt;
    Folder&amp;#40;name, children.map {
        case f @ Folder&amp;#40;name, c&amp;#41; if name == x =&amp;gt; addI&amp;#40;f, elem, xs&amp;#41;
        case a =&amp;gt; a
    } &amp;#41;
  case &amp;#95; =&amp;gt; throw new RuntimeException&amp;#40;&amp;quot;ファイルに要素を追加しようとしたのでエラー。&amp;quot;&amp;#41;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同様にcase classもimmutableにする&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;sealed trait FileInterface
case class File&amp;#40;name: String&amp;#41; extends FileInterface
case class Folder&amp;#40;name: String, f: Seq&amp;#91;FileInterface&amp;#93;&amp;#41; extends FileInterface
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;この関数をrootに対して適用する。次のようなコード。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;val root =
Folder&amp;#40;&amp;quot;project&amp;quot;, Seq&amp;#40;Folder&amp;#40;&amp;quot;app&amp;quot;, Seq&amp;#40;Folder&amp;#40;&amp;quot;controller&amp;quot;, Seq&amp;#40;File&amp;#40;&amp;quot;HomeController.scala&amp;quot;&amp;#41;,
                                                                 File&amp;#40;&amp;quot;ContentController.scala&amp;quot;&amp;#41;&amp;#41;&amp;#41;,
                                        Folder&amp;#40;&amp;quot;view&amp;quot;,       Seq&amp;#40;File&amp;#40;&amp;quot;hello.scala.html&amp;quot;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;,
                      File&amp;#40;&amp;quot;README.md&amp;quot;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;次のように実行する。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; addI&amp;#40;root, File&amp;#40;&amp;quot;AnotherController.scala&amp;quot;&amp;#41;, Seq&amp;#40;&amp;quot;app&amp;quot;, &amp;quot;controller&amp;quot;&amp;#41;&amp;#41;
res24: FileInterface =
Folder&amp;#40;project, List&amp;#40;Folder&amp;#40;app, List&amp;#40;Folder&amp;#40;controller,List&amp;#40;File&amp;#40;HomeController.scala&amp;#41;,
                                                             File&amp;#40;ContentController.scala&amp;#41;,
                                                             File&amp;#40;AnotherController.scala&amp;#41;&amp;#41;&amp;#41;,
                                      Folder&amp;#40;view, List&amp;#40;File&amp;#40;hello.scala.html&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;,
                     File&amp;#40;README.md&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;(注意):ただし、よりScalaらしく実装するなら、  File/Folderのようなデータ構造は、Traversableトレイトの具象クラスとして実装するほうが多分正解。&lt;ul&gt;&lt;li&gt;&lt;a href='https://docs.scala-lang.org/ja/overviews/collections/trait-traversable.html'&gt;Traversable トレイト | Scala Documentation&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Sat, 14 Apr 2018 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
https://yuwki0131.github.io/posts-output/2018-04-14-scala-errors/
</guid>
<link>
https://yuwki0131.github.io/posts-output/2018-04-14-scala-errors/
</link>
<title>
Scalaでの例外系の処理のしくみと使い方
</title>
<description>
&lt;p&gt;Scalaについて勉強した時のメモ(その3)です。例外系の扱い方について。OptionとEitherとException。&lt;/p&gt;&lt;p&gt;※ 元々はmarkdownで書いていたテキストの転載。&lt;/p&gt;&lt;h2 id=&quot;option&amp;#95;-&amp;#95;nullableを型レベルで表現する。&quot;&gt;Option - nullableを型レベルで表現する。&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Option型では値が入っている時に、&lt;code&gt;Some&amp;#40;値&amp;#41;&lt;/code&gt;、値がない時に&lt;code&gt;None&lt;/code&gt;で表現する。&lt;/li&gt;&lt;li&gt;&lt;a href='https://moneyforward.com/engineers_blog/2018/01/05/optional2018/'&gt;Optional(2018)年あけましておめでとうございます&lt;/a&gt;&lt;ul&gt;&lt;li&gt;まさに、2018年はOption元年と言った感じがある。(上記の言語はSwift)&lt;/li&gt;&lt;li&gt;Option外し忘れには注意。    Scalaの場合は、&lt;code&gt;Some&amp;#40;2018&amp;#41;年あけましておめでとうございます&lt;/code&gt;になる。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Optionは値がnullableな場合に使用する。未定義処理や、想定外の値を返す時にnullを返していたようなケース。&lt;/li&gt;&lt;li&gt;基本的にはnull(or empty)チェック専用の構文だと思っている。(※個人の意見です。)&lt;/li&gt;&lt;li&gt;メリット&lt;ul&gt;&lt;li&gt;データが存在しない場合に、意味のないマジックナンバーや空文字、空オブジェクトを埋め込む必要がなくなる。&lt;/li&gt;&lt;li&gt;Java製のライブラリなどでnullableが怪しいやつはとりあえずOptionで囲っておくと、nullはNoneになる。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; Option&amp;#40;null&amp;#41;
res6: Option&amp;#91;Null&amp;#93; = None
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;head, getは使わない。&lt;ul&gt;&lt;li&gt;headOption, getOptionでnullableとなるようなケースは代わりの処理を用意する。&lt;/li&gt;&lt;li&gt;headやgetで値が存在しない場合、例外が投げられるため。&lt;/li&gt;&lt;li&gt;値が存在しないケースというのは、通常、想定範囲内のケースであるため、nullやempty時に例外が投げられるのは好ましくない。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Option型の使い方が色々: &lt;a href='https://alvinalexander.com/scala/best-practice-option-some-none-pattern-scala-idioms'&gt;Scala best practice: How to use the Option/Some/None pattern&lt;/a&gt;&lt;/li&gt;&lt;li&gt;catchingやallCatchで任意の例外クラスをOptionやEitherにラップしてくれる関数も用意されている。&lt;ul&gt;&lt;li&gt;詳細は次の記事を参照: &lt;a href='http://yuroyoro.hatenablog.com/entry/20100719/1279519961'&gt;Scalaでの例外処理 - Either,Option,util.control.Exception&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; catching&amp;#40;classOf&amp;#91;NumberFormatException&amp;#93;&amp;#41; opt &amp;quot;foo&amp;quot;.toInt
res7: Option&amp;#91;Int&amp;#93; = None
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;either&amp;#95;-&amp;#95;エラーを戻り値で表現する。&quot;&gt;Either - エラーを戻り値で表現する。&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; def f&amp;#40;n: Int&amp;#41;: Either&amp;#91;String, Int&amp;#93; = if &amp;#40;n &amp;lt; 0&amp;#41; Left&amp;#40;&amp;quot;wrong n value&amp;quot;&amp;#41; else Right&amp;#40;n&amp;#41;
f: &amp;#40;n: Int&amp;#41;Either&amp;#91;String,Int&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;正常/エラーを戻り値で表す。&lt;ul&gt;&lt;li&gt;正常系の値が入っている時(正常に処理が終了した時)にRightでラップ。: &lt;code&gt;Right&amp;#40;値&amp;#41;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;異常系の値が入っている、または、エラーメッセージ等の場合にLeftでラップ。 : &lt;code&gt;Left&amp;#40;異常な値やエラーメッセージなど&amp;#41;&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Either型で値を返す事で、戻り値からその後続の処理において、正常系、エラー系、どちらの処理をすればいいのか、  型で表現でき、パターンマッチで対応できる。&lt;ul&gt;&lt;li&gt;PlayframeworkだとActionFunction(アクション合成)などで使用されている。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Right/Leftで表現しきれなくなった場合、3パターンの結果が返ってくる場合などは、代数的データ型で独自の型を定義した方がよさそう。&lt;/li&gt;&lt;li&gt;(余談)Scalaでは、デフォルトで&lt;code&gt;Either&amp;#91;A, B&amp;#93;&lt;/code&gt;を&lt;code&gt;A Either B&lt;/code&gt;と書くことができる。2つの型パラメータを持つ場合、常に書けるらしい。&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;scala&amp;gt; val x: Int Either String = Left&amp;#40;1&amp;#41;
x: Either&amp;#91;Int,String&amp;#93; = Left&amp;#40;1&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;例外(exception)&quot;&gt;例外(Exception)&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Javaと違い、Scala非チェック例外。&lt;ul&gt;&lt;li&gt;非チェック例外: 関数にExceptionクラスを列挙する必要が無くなるが、関数呼び出し時にはどの例外が返ってくるか分からなくなる。&lt;/li&gt;&lt;li&gt;非チェック例外なので、呼び出し元(を書く人)は呼び出し先が例外を投げてくるのか、    その場合はどのような挙動にすべきか、考慮しなくなりがち。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;try-catchでキャッチする場合は、NonFatalでキャッチする。&lt;ul&gt;&lt;li&gt;NonFatalはパターンマッチで例外をキャッチする時に、致命的なエラーでないエラーのみをキャッチする。&lt;/li&gt;&lt;li&gt;&lt;a href='http://d.hatena.ne.jp/Kazuhira/20130124/1359036747'&gt;Scala 2.10.0 Try ＆ NonFatal&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;例外の扱い方色々: &lt;a href='http://seratch.hatenablog.jp/entry/20111126/1322309305'&gt;scala.util.control.Exception._を使ったサンプル集&lt;/a&gt;&lt;/li&gt;&lt;li&gt;例外を投げるとその関数は全域関数でなくなる。いわゆる純粋な関数でなくなる。&lt;ul&gt;&lt;li&gt;※全ての引数のパターンに対して戻り値が定まっている関数のことを全域関数という。    例外以外にも、特定の値を引数として渡した時に無限ループになるような関数も全域関数ではない。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Eitherとかとの使い分け。(※以下、個人の主観です。)&lt;ul&gt;&lt;li&gt;他言語だと、Haskellは純粋な関数ではMaybe(Scalaで言う所のOption)、Eitherを使うようだが、    Haskell以外のそこまでこだわらない言語だと割とフランクに投げるイメージがある。EitherやOptionの方が好ましい程度。&lt;/li&gt;&lt;li&gt;Java風に簡単なチェックやバリデーションにまで、例外を投げられると辛い。(いちいちcatchしないといけなくなるので)&lt;/li&gt;&lt;li&gt;全てを放棄して、フレームワーク(Playframework)に処理を任せる場合のみ例外を投げた方がいい気がする。&lt;ul&gt;&lt;li&gt;例外を投げる時は、finally系の処理がない事が前提。      必要な場合はtry-finallyを使う必要がある(FutureだとrecoverやonComplete)。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;リカバリーの処理が必須なら、Option/Eitherで返される方が明示的になる。&lt;ul&gt;&lt;li&gt;Future系のrecover関数とOption/Eitherどちらか、書きやすさで選ぶ?&lt;/li&gt;&lt;li&gt;特にユーザの入力系はExceptionよりもOption/Eitherの方がその後(失敗後)の処理が書きやすい。&lt;/li&gt;&lt;li&gt;例外による余計なジャンプが無くなるため、例外をcatchし損ねる事がなくなり、finally漏れによるバグが無くなる。&lt;ul&gt;&lt;li&gt;呼び出し元の関数 → 例外を想定していない関数 → 例外創出を前提とした関数の組み合わせで呼び出しが発生した時、        例外を想定していない関数内の処理で問題が発生するリスクが常に存在する。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://dwango.github.io/scala_text/error-handling.html'&gt;エラー処理 - dwango on GitHub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;非同期プログラミング時(Futureを使っている場合など)に、例外の挙動はさらに複雑になる。&lt;ul&gt;&lt;li&gt;onCompleteやrecover(recoverFrom)などの記述がないと、&lt;strong&gt;例外は基本的に握りつぶされる&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;Futureの周りをtry-catchで囲っても意味はない。try-catchを抜けた後でFutureが別スレッドで実行される。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ダメな例。&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;try {
  Future { throw new RuntimeException&amp;#40;&amp;quot;未来のエラー&amp;quot;&amp;#41; }
} catch {
  case e =&amp;gt; println&amp;#40;&amp;quot;未来のエラーを事前に防ぎました！&amp;quot;&amp;#41;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Scalaで例外を投げまくるコードを書く時は常に注意が必要。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;例外を投げた方がシンプルになる事も多いが、ある程度は、Option/Eitherを使った方がよさそう。&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Sat, 14 Apr 2018 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
https://yuwki0131.github.io/posts-output/2017-08-26-make-a-lisp-minimum/
</guid>
<link>
https://yuwki0131.github.io/posts-output/2017-08-26-make-a-lisp-minimum/
</link>
<title>
最低限のLispを作るためのマイルストーン
</title>
<description>
&lt;p&gt;最低限のLispを作るためのメモです。&lt;/p&gt;&lt;h1 id=&quot;言語のアウトラインをパクる(r7rs)&quot;&gt;言語のアウトラインをパクる(R7RS)&lt;/h1&gt;&lt;p&gt;言語のアウトライン(特にSyntax)は一度見ておいた方がいい。 最低限のLispという点でCommon LispよりはScheme寄りになると思う。 独自のLispを作るのでR7RSの実装からは外れていくだろうが、実際の仕様書がどのように書かれているのかは一応参考にはなる。&lt;/p&gt;&lt;h1 id=&quot;lexer/parserを書く&quot;&gt;lexer/parserを書く&lt;/h1&gt;&lt;p&gt;最近はparser comibnatorがあるし、Lispは括弧で囲まれたリストとシンボルだけという基本的なシンタックスなので、 lexerとparserはまとめて実装できるはず。最初は代数的データ型やcase class(または普通のクラス?)も最低限の記法で間に合うかと。 動的型付け言語なら、もっとシンプルに普通にリストと(シンボルを表す)文字列というデータ型でいけてしまうかも。 後で、必要に応じて拡張していけばいい。&lt;/p&gt;&lt;h1 id=&quot;eval関数と環境を実装&amp;#95;(とりあえず、(+&amp;#95;1&amp;#95;2)が評価出来る所まで実装)&quot;&gt;eval関数と環境を実装 (とりあえず、(+ 1 2)が評価出来る所まで実装)&lt;/h1&gt;&lt;p&gt;eval関数を実装して、Lispの最も初歩的な文法である&lt;code&gt;&amp;#40;+ 1 2&amp;#41;&lt;/code&gt;が実行可能な所まで持っていく。 ちなみにLispでは、&lt;code&gt;+&lt;/code&gt;は演算子ではなく、関数。 ここまで行くと、モチベーションが格段に上がるので、&lt;code&gt;&amp;#40;+ 1 2&amp;#41;&lt;/code&gt;で結果が返ってくるような形まで作っておきたい。&lt;/p&gt;&lt;p&gt;必要になってくるのは、&lt;code&gt;&amp;#40;+ 1 2&amp;#41;&lt;/code&gt;を評価するための関数(evalと呼ばれるやつ)と、環境(変数名と値のペアのリスト)、 プリミティブ関数&lt;code&gt;+&lt;/code&gt;、number型(int型?)の実装。また、この時の&lt;code&gt;&amp;#40;+ 1 2&amp;#41;&lt;/code&gt;は、ネストさせて&lt;code&gt;&amp;#40;+ 1 &amp;#40;+ 2 3&amp;#41;&amp;#41;&lt;/code&gt;と書いても動くように しておくことが求められる。eval関数は再帰的に実装すること。 環境に関しては、環境から値を検索し取り出すための関数も必要となる。&lt;/p&gt;&lt;h1 id=&quot;プリミティブ(定数と関数)を実装&quot;&gt;プリミティブ(定数と関数)を実装&lt;/h1&gt;&lt;p&gt;&lt;code&gt;&amp;#40;+ 1 2&amp;#41;&lt;/code&gt;を評価できるeval関数が実装できたら、後はそれを引き伸ばしていくだけ。&lt;/p&gt;&lt;p&gt;booleanとnumberを操作する一連の関数を実装する。 booleanとnumberで計算が出来るレベルとなると、電卓っぽくなる。&lt;/p&gt;&lt;h1 id=&quot;ifを実装&quot;&gt;ifを実装&lt;/h1&gt;&lt;p&gt;最初の制御構文的な機能、&lt;code&gt;if&lt;/code&gt;を実装する。が、これは実際すごく簡単。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;if condition then-clause else-close&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;に対して、&lt;code&gt;condition&lt;/code&gt;を評価して、その結果のtrue/falseに合わせて、 &lt;code&gt;then-clause&lt;/code&gt;もしくは&lt;code&gt;else-clause&lt;/code&gt;のどちらかを評価し、その結果を返すだけ。&lt;/p&gt;&lt;h1 id=&quot;変数を実装(letを実装)&quot;&gt;変数を実装(letを実装)&lt;/h1&gt;&lt;p&gt;letは実際のところ、ラムダ抽象へ置換可能ので、最低限の機能を持ったLisp実装する上では、 態々実装する必要はない。しかし、letを先に実装しておくと、後のラムダ抽象の実装が楽になる。&lt;/p&gt;&lt;h1 id=&quot;ラムダ抽象と関数適用の追加実装&quot;&gt;ラムダ抽象と関数適用の追加実装&lt;/h1&gt;&lt;p&gt;ラムダ抽象&lt;a href='#fn-1' id='fnref1'&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;は大体、以下のような式。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;lambda &amp;#40;x&amp;#41; ...&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;このラムダ抽象の実装は、eval関数に、ラムダ抽象が与えられた場合にクロージャを返す処理を追加し、 関数適用にクロージャが関数として与えられた場合の処理を追加する。&lt;/p&gt;&lt;h1 id=&quot;ひとまずゴール&amp;#95;-&amp;#95;足りない機能はラムダ計算で補う&quot;&gt;ひとまずゴール - 足りない機能はラムダ計算で補う&lt;/h1&gt;&lt;p&gt;ここまでくれば、ひとまず、プログラミング言語としては完成。&lt;/p&gt;&lt;p&gt;ループはYコンビネータによる再帰で実現させる。&lt;/p&gt;&lt;p&gt;ラムダ抽象(と関数適用)を実装したことで、Yコンビネータによる再帰が可能になる。 YコンビネータとはSchemeで書くと以下のような式。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;lambda &amp;#40;f&amp;#41; &amp;#40;&amp;#40;lambda &amp;#40;p&amp;#41; &amp;#40;f &amp;#40;lambda &amp;#40;a&amp;#41; &amp;#40;&amp;#40;p p&amp;#41; a&amp;#41;&amp;#41;&amp;#41;&amp;#41; &amp;#40;lambda &amp;#40;p&amp;#41; &amp;#40;f &amp;#40;lambda &amp;#40;a&amp;#41; &amp;#40;&amp;#40;p p&amp;#41; a&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;このコンビネータに対して、例えば、以下の再帰的な関数fibを(引数として)与える。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;lambda &amp;#40;fib&amp;#41; &amp;#40;lambda &amp;#40;n&amp;#41; &amp;#40;if &amp;#40;= n 0&amp;#41; 0 &amp;#40;if &amp;#40;= n 1&amp;#41; 1 &amp;#40;+ &amp;#40;fib &amp;#40;- n 1&amp;#41;&amp;#41; &amp;#40;fib &amp;#40;- n 2&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;すると、以下の式のクロージャが生成される。この時のクロージャが持つ環境の変数fibには自分自身の以下の式が束縛されている。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;lambda &amp;#40;n&amp;#41; &amp;#40;if &amp;#40;= n 0&amp;#41; 0 &amp;#40;if &amp;#40;= n 1&amp;#41; 1 &amp;#40;+ &amp;#40;fib &amp;#40;- n 1&amp;#41;&amp;#41; &amp;#40;fib &amp;#40;- n 2&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;このクロージャfibに&lt;code&gt;&amp;#40;fib 10&amp;#41;&lt;/code&gt;などの関数適用を行うことで再帰呼出しが実現する。&lt;/p&gt;&lt;p&gt;また、データ構造も実装してないように思えるかも知れないが、これまたラムダ計算でcons/car/cdrを表現する手法がある。 したがって、ラムダ抽象を実装した時点で、すでにリスト構造の実装も終わっていた。&lt;/p&gt;&lt;p&gt;というわけで、最低限の機能を持ったプログラミング言語が実装できたと結論付ける。&lt;/p&gt;&lt;h1 id=&quot;その他のtodo&quot;&gt;その他のTODO&lt;/h1&gt;&lt;p&gt;以上から、プログラミング言語を実装したも同然だが、当然、言語としては物足りない。&lt;/p&gt;&lt;p&gt;基本的には処理系の実装をサボった分だけ、作った言語(処理系)でプログラムを書くのが大変になる。 例えば、再帰呼出しを書くたびにYコンビネータを使うという辛みが残ってしまう。&lt;/p&gt;&lt;p&gt;というわけで、以下のようなTODOが残ることとなる。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;部分適用&lt;/li&gt;&lt;li&gt;letrecでプリミティブな再帰を実装&lt;/li&gt;&lt;li&gt;グローバル環境に変数を束縛&lt;/li&gt;&lt;li&gt;その他、文字列の実装、組み込みデータ型の実装など (あとは自由に拡張してくだけ)&lt;/li&gt;&lt;li&gt;コンパイラの実装など... etc&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;まあこの辺は、のんびり実装すればいいと思うが。&lt;/p&gt;&lt;h2&gt;&lt;/h2&gt;脚注&lt;ol class='footnotes'&gt;&lt;li id='fn-1'&gt;別名、ラムダ式とか無名関数と言ったりするが、ラムダ式という言い方は、後述するラムダ計算のラムダ式と紛らわしい。したがって、ラムダ抽象と書いておくこととする。&lt;a href='#fnref1'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
</description>
<pubDate>
Sat, 26 Aug 2017 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
https://yuwki0131.github.io/posts-output/2017-08-11-scala-type-mismatch-option/
</guid>
<link>
https://yuwki0131.github.io/posts-output/2017-08-11-scala-type-mismatch-option/
</link>
<title>
Scalaで、再代入時にOptionを使おうとしたらtype-mismatch
</title>
<description>
&lt;p&gt;Scalaに入門して少し経ちましたが、コードを書いていると早速、型推論でのエラーが発生して少し悩みました。 Option型で再代入可能な変数(varで宣言した変数)に再代入しようとした箇所に、エラーが発生。&lt;/p&gt;&lt;p&gt;ざっくりと書くと、以下のような感じでエラーが発生しました。。。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;scala&amp;gt; var x = None
var x = None
x: None.type = None

scala&amp;gt; x = Some&amp;#40;10&amp;#41;
x = Some&amp;#40;10&amp;#41;
&amp;lt;console&amp;gt;:8: error: type mismatch;
 found   : Some&amp;#91;Int&amp;#93;
 required: None.type
       x = Some&amp;#40;10&amp;#41;
               &amp;#94;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;実際のコードは上記と異なり、replで実行したコードではなく、 メソッド内でvarの変数を定義し、そこに再代入を行う以下のような処理ですが、意味的には上記と同じような状況です。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;var x = None

// 様々な処理

x = Some&amp;#40;10&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;先に変数xにNoneを代入しておいて、あとから、Some(〜)を再代入しようとした処理を書くという流れです。&lt;/p&gt;&lt;p&gt;Noneを初期値として入れておいた変数xに後からSome(〜)を代入する処理を書こうとすれば、当然、コンパイラの側でOption型を 推論してくれるものと思っていたのですが、甘かった。&lt;/p&gt;&lt;p&gt;replだとなんとなく分かりますが、初期値を代入した時点では、var xの型はNone.typeとなってしまい、Option型ではありません。 問題は、コンパイラが後から変数xはNone.typeではなく、Option[Int]型であるといった推論をしてくれないことにあります。&lt;/p&gt;&lt;p&gt;先にNoneを代入した後に、Someを代入する場合は、変数がOption型であることを先に明示しておく必要があります。 型注釈を以下のようにつけると、変数がOption型であることを認識して、Option型の再代入が可能になります。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;scala&amp;gt; var x = None:Option&amp;#91;Int&amp;#93;
var x = None:Option&amp;#91;Int&amp;#93;
x: Option&amp;#91;Int&amp;#93; = None

scala&amp;gt; x = Some&amp;#40;10&amp;#41;
x = Some&amp;#40;10&amp;#41;
x: Option&amp;#91;Int&amp;#93; = Some&amp;#40;10&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;そもそもなんでこんな言語仕様なのか、なぜ、このような挙動をするのか、詳しく調べた訳ではないですが、 以下にそれらしい内容が載っていました。&lt;/p&gt;&lt;p&gt;&lt;a href='https://togetter.com/li/219702'&gt;Scalaの型推論について - Togetterまとめ&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Scalaの型推論では、基本的に前方から順に型推論し、後方で想定外の型であると型エラーが発生する仕組みになっている。&lt;/li&gt;&lt;li&gt;強力な型推論を行った場合、型エラーが分かりづらくなるため、上記のような弱い推論方法を採用しているのかも知れない。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;とのこと。&lt;/p&gt;&lt;p&gt;時代的にみてもScalaは、SystemFが登場した後に設計された(2001年ごろ〜)言語で、 すでにHaskellやOCamlなど強力な型推論システムを持つ実用的な言語が既に登場しています。 にも関わらず、このような設計にっているのは、型エラーの複雑さ(わかりづらさ)を回避したい狙いがあった、ということのようです。&lt;/p&gt;&lt;p&gt;前方から型推論していくと考えると、型エラーの分かりづらさはかなり軽減されそうです。 上記のエラーは、その辺りのトレードオフを考えてた上での、型エラーとという事のなのでしょう。&lt;/p&gt;
</description>
<pubDate>
Fri, 11 Aug 2017 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
https://yuwki0131.github.io/posts-output/2017-08-05-rename-title/
</guid>
<link>
https://yuwki0131.github.io/posts-output/2017-08-05-rename-title/
</link>
<title>
ブログのタイトル変えました
</title>
<description>
&lt;p&gt;ブログのタイトル(yuwki0132-blog)が酷いので、パウル・クレーの絵画「何で走っているのだろう」からタイトルを拝借しました。&lt;/p&gt;
</description>
<pubDate>
Sat, 05 Aug 2017 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
https://yuwki0131.github.io/posts-output/2017-08-02-cryogen-workflow/
</guid>
<link>
https://yuwki0131.github.io/posts-output/2017-08-02-cryogen-workflow/
</link>
<title>
Cryogen/Github-Pagesでブログを書く
</title>
<description>
&lt;p&gt;とりあえず、一通り、Cryogen/Github-Pagesで静的なWebページの公開までたどり着いたので、その紹介などをざっくりと書きます。&lt;/p&gt;&lt;h3 id=&quot;cryogenでブログ作成〜github-pagesで公開まで&quot;&gt;Cryogenでブログ作成〜Github-Pagesで公開まで&lt;/h3&gt;&lt;p&gt;主にやったこととしては、&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Cryogenのプロジェクトをリモートリポジトリ(BitBucket&lt;a href='#fn-1' id='fnref1'&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;)にまるごと登録&lt;/li&gt;&lt;li&gt;諸々の設定ファイルを修正&lt;/li&gt;&lt;li&gt;とりあえず、最初の記事を書く&lt;/li&gt;&lt;li&gt;ローカル環境で表示確認のテスト&lt;/li&gt;&lt;li&gt;username.github.ioのリポジトリを作成&lt;/li&gt;&lt;li&gt;Cryogenで作成生成されたpublicファイルをgithub.ioのリポジトリに登録&lt;ul&gt;&lt;li&gt;とりあえず静的Webサイト(ブログ一式)が公開される&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;ビーコン設置&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;といった流れで作成しました。&lt;/p&gt;&lt;p&gt;Cryogenでのブログ作成については、公式の&lt;a href='https://github.com/cryogen-project/cryogen/blob/master/README.md'&gt;README.md&lt;/a&gt; を見ながら作ったという感じです。&lt;/p&gt;&lt;p&gt;ドキュメント(&lt;a href='http://cryogenweb.org'&gt;cryogenweb.org&lt;/a&gt;)も整備されていたりします。&lt;/p&gt;&lt;p&gt;設定ファイルですが、主に以下のファイルに必要な情報を書き込んでいきます。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;プロジェクトルート/resources/templates/config.edn
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;テーマは、今後変更する予定ですが、とりあえずデフォルトのテーマを使うことにしてます。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;プロジェクトルート/resources/templates/themes/blue
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;デフォルトのテーマは上記にあるので、その辺りを自分好みに修正しました。 今後は、もっと修正をかけまくる or 別テーマにする予定です。今のテーマ、 残念ながら私好みでないので。。。&lt;/p&gt;&lt;p&gt;ブログ記事の生成は通常のleiningenを走らせるのと同様、&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;で生成できます。ローカルで生成結果を確認したい場合は、&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein ring server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;などとするとページが表示され確認可能です。&lt;/p&gt;&lt;p&gt;この時、サーバを立ち上げっぱなしにしておくと、記事を修正とブラウザの更新を繰り返すことで 記事を書きながらその内容を即座に確認するといったことが可能になります。&lt;/p&gt;&lt;p&gt;記事は日付とタイトルを付けて以下に格納します。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;プロジェクトルート/resources/templates/md/posts/YYYY-MM-dd-post-title.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Cryogenでは、resource/template配下のファイルを読み取り、resource/public配下に公開可能な静的Webコンテンツ一式を出力します。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;プロジェクトルート/resources/templates
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;プロジェクトルート/resources/public
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Github PagesのリポジトリにCryogenで生成したpublic下ファイルを登録することで、ブログとして公開できます。&lt;/p&gt;&lt;p&gt;後は、アクセス情報なんかも欲しいので、以下の記事を見ながら、ga-beaconを使って見ました。&lt;/p&gt;&lt;p&gt;&lt;a href='http://qiita.com/kabayan55/items/f15c822939b2ab7dba35'&gt;GitHub Pagesでga-beaconを使ってリアルタイムアクセス解析 - Quiita&lt;/a&gt;&lt;/p&gt;&lt;p&gt;以下の記事を見た感じだと、Cryogenでページ生成した場合、Google Analiticsを使う場合は、 やっぱり、base.html&lt;a href='#fn-2' id='fnref2'&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;下にタグを埋め込む(人が多い)のかなぁ、といった感じです。&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/cryogen-project/cryogen/issues/88'&gt;feature request - google analytics support (solved if i add docs :-)) #88&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;プロジェクトルート/resources/templates/themes/blue/html/base.html
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;今後の記事を書く流れ&quot;&gt;今後の記事を書く流れ&lt;/h3&gt;&lt;p&gt;今後の記事公開までの主な流れとしては、&lt;/p&gt;&lt;ol&gt;&lt;li&gt;ローカルでブログ記事を書く&lt;/li&gt;&lt;li&gt;ページ生成とローカルで記事の表示テスト&lt;/li&gt;&lt;li&gt;リモートリポジトリにまるごと差分をコミット&lt;/li&gt;&lt;li&gt;生成されたページをGithub-Pagesにコミット/プッシュで、公開&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;かな、と思ってます。&lt;/p&gt;&lt;p&gt;あとは、ブログのデザインについても適宜修正していく予定です。 特に最近は、&lt;a href='https://www.flaticon.com/'&gt;flaticon.com&lt;/a&gt; がお気に入りなので、 ぜひ使わせていただければと考えています。&lt;/p&gt;&lt;h3 id=&quot;感想など&quot;&gt;感想など&lt;/h3&gt;&lt;p&gt;色々、設定は面倒ですが、Emacsで記事が書けるようになった点が幸せですね。 また、手元でファイル管理できるという点も既存のブログサイトの利用より、メリットがあるのではと思っています。 versionコントロールもしやすいので。 &lt;ol class='footnotes'&gt;&lt;li id='fn-1'&gt;別にGithubに登録してもよかったのですが、無駄にリポジトリは公開したくない主義なので。。。&lt;a href='#fnref1'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id='fn-2'&gt;base.htmlは、テーマ直下にあるテンプレートのベースとなるhtmlです。&lt;a href='#fnref2'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;
</description>
<pubDate>
Wed, 02 Aug 2017 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
https://yuwki0131.github.io/posts-output/2017-08-01-quickstart/
</guid>
<link>
https://yuwki0131.github.io/posts-output/2017-08-01-quickstart/
</link>
<title>
CryogenでブログのQuick Startをしてみた
</title>
<description>
&lt;h3 id=&quot;ブログを書く時の物理的/心理的ハードル&quot;&gt;ブログを書く時の物理的/心理的ハードル&lt;/h3&gt;&lt;p&gt;長らくGoogle Bloggerを使ってプログラミング関連をネタとしたブログを書いてきました。&lt;/p&gt;&lt;p&gt;Google Bloggerも良かったのですが、自前のサーバーでもブログ書きたいなとか、記事がmarkdownで書けないとか、 そもそもEmacsで書けないとか不満が色々出てきました。&lt;/p&gt;&lt;p&gt;そして何より、気づいたら、ブログを書くハードルが高くなってました。&lt;/p&gt;&lt;p&gt;色々思う所があり、1記事書くのにかかるコスト感が半端ない感じで上がりました。&lt;/p&gt;&lt;p&gt;以下、色々思う所です。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;HelloWorld的な基礎的な内容や簡単な備忘録程度ならわざわざブログに書く必要性が感じられない。&lt;/li&gt;&lt;li&gt;日本語で他の記事を参照すれば分かるような内容は書きたくない(書く意味がない)。&lt;/li&gt;&lt;li&gt;リファレンスは? エビデンスは?&lt;/li&gt;&lt;li&gt;(他人がどう思うかはとりあえず置いとくとして、そもそも)自分が面白いと思える内容なのか?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;しかし以上の思い込みは、アウトプットする行為と比較すると非常に下らない考えです。&lt;/p&gt;&lt;p&gt;この心理的ハードルをEmacsとMarkdwonとClojureの力で下げたい!&lt;/p&gt;&lt;h3 id=&quot;cryogenでマイクロ技術ブログ的な何かを行う試み。&quot;&gt;Cryogenでマイクロ技術ブログ的な何かを行う試み。&lt;/h3&gt;&lt;p&gt;というわけで、Google Bloggerより手軽に記事を書ける環境を探していた所、 Cryogen使えばいいじゃんという結論に落ち着きました。。。&lt;/p&gt;&lt;p&gt;Cryogenは、Clojureで作られた静的サイトジェネレータです。ClojureのWebサーバringと一緒に使うことで、ブログサイトを簡単に構築できます。 以下の公式ページを見た方が早いですが、非常に簡単にblogが立ち上がります。&lt;/p&gt;&lt;p&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;a href='https://github.com/cryogen-project/cryogen'&gt;Cryogen&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;基本的にサーバでCryogenのプロジェクトを走らせといて、適当なディレクトリ (プロジェクト・ルート/resources/templates/md/posts/配下)に Markdown(or AsciiDocも使えます)を突っ込んどけば、サーバ側でいい感じに静的なブログを作ってくれるという仕組みです。 RSSフィードなども自動生成してくれるようで有りがたいです。&lt;/p&gt;&lt;p&gt;また、金銭的な都合で、Github Pagesを使うことにしました。&lt;/p&gt;
</description>
<pubDate>
Tue, 01 Aug 2017 00:00:00 +0900
</pubDate>
</item>
</channel>
</rss>
